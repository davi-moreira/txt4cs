[
["index.html", "Texto como Dado para Ciências Sociais guia prático com aplicações Prefácio Objetivo Sobre o autor/organizador Licença Agradecimentos", " Texto como Dado para Ciências Sociais guia prático com aplicações Davi Moreira Criado em 02-08-2019. Atualizado em: 16-03-2021 Prefácio A partir da produção de material para o curso Text as Data: análise automatizada de conteúdo que ministrei no MQ-UFMG em 2019 e no artigo que publiquei em coautoria com Maurício Izumi (Izumi and Moreira 2018), esse livro tem como propósito difundir nas ciências sociais e humanidades técnicas e métodos de análise automatizada de conteúdo usando a linguagem R. Objetivo O principal objetivo do livro é ser tutorial prático de uso e aplicação de técnicas e métodos de análise automatizada de conteúdo na língua portuguesa através da linguagem R . Sobre o autor/organizador Davi Moreira é Doutor em Ciência Política pela Universidade de São Paulo (USP) e vencedor do Prêmio CAPES de tese 2017 na área de Ciência Política e Relações Internacionais. Atua nas seguintes áreas: políticas públicas, estudos legislativos, métodos quantitativos em ciências sociais e análise automatizada de conteúdo. Para mais informações: Página pessoal. GitHub Google Scholar. Licença Este livro é distribuído de acordo com a licença Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0). Agradecimentos Agradeço aos organizadores do MQ-UFMG 2019 pela oportunidade de ministrar o curso e assim me estimular a empreender esse projeto. Também agradeço aos amigos Manoel Galdino, Rafael Magalhães, Lincon Ribeiro e Umberto Mignozzetti pelo apoio e incentivo ao longo de toda minha trajetória como cientista. Por fim, agradeço à fantástica cientista de dados Mônica Rocabado, sem a qual esse projeto continuaria na gaveta. Este livro é escrito com o uso do pacote bookdown (Xie 2019), através do R Markdown e knitr (Xie 2015). Referências "],
["intro.html", "Capítulo 1 Introdução 1.1 O R e o RStudio 1.2 O Pacote txt4cs e outros 1.3 Material de apoio", " Capítulo 1 Introdução 1.1 O R e o RStudio Com o objetivo de ser um tutorial prático de uso e aplicação de técnicas e métodos de análise automatizada de conteúdo para ciências sociais e humanidades este livro fará uso da linguagem R. R é uma linguagem de programação e também um ambiente de desenvolvimento integrado para cálculos estatísticos e gráficos. Ele pode ser facilmente instalado através do link: https://cran.r-project.org/. Para auxiliar no desenvolvimento das análises, este livro incentiva o uso do RStudio. Trata-se de um software livre de ambiente de desenvolvimento integrado (IDE) para o R1. De forma ilustrativa, o R e o RStudio operam como a figura abaixo: Com o RStudio, você estará diante do seguinte dashboard: Se está começando a usar o R para análise de dados, recomendo o seguinte material: R for Data Science; Modern Dive - Statistical Inference via Data Science; Curso R; Usando R: Um Guia para Cientistas Políticos; Em caso de dúvidas, use e abuse de fóruns como o Stackoverflow. Para aprimorar seu código e otimizar o desenvolvimento de suas análises, os guias de estilo do Google e do RStudio são ótimas referências. 1.2 O Pacote txt4cs e outros Este livro conta com o pacote txt4cs. Ele traz consigo funções específicas e bases de dados utilizadas nos exemplos apresentados. Um dos acervos de exemplo se refere ao conteúdo proferido em 17 de abril de 2016, dia de aprovação do impeachment da então Presidenta Dilma Rousseff na Câmara dos Deputados. Figure 1.1: Fonte: Empresa Brasil de Comunicação - EBC Para instalação, use os comandos abaixo: if(require(devtools) == F) install.packages(&#39;devtools&#39;); require(devtools); devtools::install_github(&quot;davi-moreira/txt4cs-pkg&quot;) require(txt4cs) Ademais, os seguintes pacotes são essenciais para o desenvolvimento da análise automatizada de conteúdo com o R. Conforme forem necessários, serão apresentados no livro. install.packages(&quot;tidyverse&quot;) install.packages(&quot;stringr&quot;) install.packages(&quot;quanteda&quot;) install.packages(&quot;readtext&quot;) install.packages(&quot;stringi&quot;) install.packages(&quot;tm&quot;) 1.3 Material de apoio Este livro não é feito do zero e resulta de inspiração em diferentes fontes. As principais são: 1.3.1 Referências para processamento de sequências de caracteres com o R Handling and Processing Strings in R e Handling Strings with R R Wikibook: Programming and Text Processing stringr: modern, consistent string processing 1.3.2 Referências em análise de conteúdo com o R: Quanteta Tutorials Text Mining with R IDE, do inglês Integrated Development Environment, é um programa de computador que reúne características e ferramentas de apoio ao desenvolvimento de software com o objetivo de agilizar este processo.↩ "],
["tada.html", "Capítulo 2 Text as data: o texto como dado 2.1 Panorama da área 2.2 Oportunidades 2.3 Quadro geral de metodologias 2.4 O processo de análise do texto como dado", " Capítulo 2 Text as data: o texto como dado 2.1 Panorama da área A análise de conteúdo possui grande relevância para as ciências sociais. Contudo, sua abordagem manual sempre limitou o volume de documentos sob análise. São raros os projetos como o Manifesto Research Group que, desde os anos 1970, analisa a ênfase temática de manifestos partidários ou o Comparative Agendas Project, que coleta e analisa dados sobre agendas de políticas públicas em diferentes países. O avanço tecnológico e científico permitiu que técnicas automatizadas de análise do conteúdo fossem desenvolvidas e aplicadas de forma simples a grandes acervos. Este avanço não foi realizado sem a contribuição das ciências sociais. Só a Political Analysis, principal revista de métodos em ciência política, possui dois special issues dedicados ao tema (Special Issue, Virtual Issue). 2.2 Oportunidades Com o desenvolvimento de métodos para análise automatizada de conteúdo, hoje o leque de oportunidades as ciências sociais é diverso e promissor. Agora, é possível: Analisar grandes acervos de forma ágil e barata, otimizando o trabalho do pesquisador. Figure 2.1: Biblioteca Florestan Fernandes - FFLCH - USP Pesquisar novos acervos para inferir o conteúdo presente e assim guiar pesquisas através de atalhos informacionais. Figure 2.2: Acervo da CIA: https://www.cia.gov/library/readingroom/advanced-search-view Analisar processos políticos contemporâneos. Figure 2.3: Trecho de fala do Deputado Federal Glauber Braga (PSOL-RJ) durante seu voto no processo de impeachment da então Presidenta da República Dilma Rousseff em 2016. Redes sociais. Figure 2.4: Foto de Pedro Ladeira, Folha de São Paulo, maio de 2019. Fake news! Olhar o passado com as lentes do presente. Questões que antes não podiam ser enunciadas agora podem ser respondidas! Processos políticos conhecidos podem ganhar novas interpretações através do uso de métodos e técnicas contemporâneas de análise automatizada de conteúdo. Figure 2.5: Liberdade Guiando o Povo - Eugène Delacroix - 1830 Contribuir socialmente: Retórica Parlamentar - Projeto experimental desenvolvido no primeiro Hackathon da Câmara dos Deputados em 2013 por Davi Moreira, Manoel Galdino e Luis Carli. Posteriormente incubado pelo Laboratório Hacker da Câmara dos Deputados. 2.3 Quadro geral de metodologias Dada a complexidade da linguagem, o processo de geração, produção e seleção de dados que resultam na comunicação humana é ainda um mistério para a ciência (Izumi and Moreira 2018; Grimmer and Stewart 2013). Logo, modelos estatísticos desenvolvidos falham na tarefa de prover um relato preciso do processo de geração de dados utilizados na produção de conteúdo e, principalmente, em seu significado. Os modelos de análise de conteúdo, portanto, não devem ser avaliados pelo quanto explicam do processo de geração dos dados. Transformar palavras em números não substitui a leitura cuidadosa e atenta de documentos. Reconhecendo que “métodos de análise automatizada de conteúdo são modelos incorretos de linguagem” (Grimmer and Stewart 2013, 2), a performance de qualquer método automatizado não é garantida sem a consideração de ao menos quatro princípios: Todos os modelos quantitativos de análise de conteúdo estão errados, mas alguns são úteis; Métodos quantitativos de análise de conteúdo amplificam a capacidade humana, mas não a substitui; Não há um método global para a análise automatizada de conteúdo; Validar, validar, validar. A escolha do modelo, da família de modelos ou de eventuais combinações a serem utilizadas é resultado dos objetivos almejados. Há uma variedade de modelos disponíveis e nenhum deles se sobrepõe aos demais. Além de estatísticas e outras informações que podem ser obtidas através da mineração do texto enquanto dados, nesse livro será dado foco aos métodods de escalonamento e classificação de conteúdo. Assim, como indicado pelo quadro de Grimmer e Stewart (2013) métodos de análise supervisionada e não supervisionada serão abordados. Figure 2.6: Quadro geral de metodologias para análise automatizada de conteúdo (Grimmer e Stewart, 2013) 2.4 O processo de análise do texto como dado O processo de trabalho para análise quantitativa de texto é muito similar a qualquer tipo de fluxo de trabalho para análise de dados em geral. Como indicado no livro Text Mining with R: a tidy approach (Silge and Robinson 2017), o seguinte fluxograma será adotado nesse livro: Figure 2.7: Fonte: Text Mining with R Referências "],
["regex.html", "Capítulo 3 R e o Processamento de Linguagem Natural 3.1 Encoding - Codificação de caracteres 3.2 Encoding para remover acentos", " Capítulo 3 R e o Processamento de Linguagem Natural O processamento de linguagem natural (NLP) é um subcampo da ciência da computação relacionado às interações entre computadores e a linguagem humana. O R dispõe de uma série de pacotes dedicados a essa área e apresenta grande potencial ao conectar o processamento de linguagem natural a todo seu arcabouço de pacotes estatísticos2. 3.1 Encoding - Codificação de caracteres Um repertório de caracteres é representado por algum tipo de sistema de codificação ( Wiki ). Exemplo comum de sistema de codificação é o código Morse que codifica as letras do alfabeto latino e os numerais como sequências de pulsos elétricos de longa e curta duração. Outro exemplo é o sistema de codificação UTF-8, capaz de codificar todos os 1.112.064 pontos de código válidos em Unicode usando até 8 bits. O R fornece funções para lidar com diferentes sistemas de codificação. Isso é útil se você lida com arquivos de texto que foram criados com outro sistema operacional e especialmente se o idioma não for o inglês e tiver muitos acentos e caracteres específicos. Por exemplo, o esquema de codificação padrão no Linux é UTF-8, enquanto o esquema de codificação padrão no Windows é Latin1. A função Encoding() retorna a codificação de uma sequência de caracteres. Por sua vez, a função iconv() é usado para converter a codificação. Vejamos um exemplo de identificação do encoding de uma sequência de caracteres: chr &lt;- &quot;olê, olê, olê, olá, Lula, Lula&quot; Encoding(chr) &lt;- &quot;UTF-8&quot; Encoding(chr) ## [1] &quot;UTF-8&quot; Utilizando o resultado do código do bloco acima, vamos agora converter o sistema de codificação para Latin1: chr &lt;- iconv(chr, from = &quot;UTF-8&quot;, to = &quot;latin1&quot;) Encoding(chr) ## [1] &quot;latin1&quot; Para conhecer a lista de sistemas de codificação de seu computador, use a função iconvlist(). 3.2 Encoding para remover acentos Conhecer o sistema de codificação e como utilizá-lo é útil se você lida com arquivos de texto criados com outro sistema operacional e/ou em idiomas que utilizam acentos e caracteres específicos. A depender da análise que deseja fazer, pode ser do seu interesse remover os acentos de uma sequência de caracteres. Nesse caso, vejamos um exemplo com o uso do pacote stringi: library(stringi) chr &lt;- &quot;olê, olê, olê, olá, Lula, Lula&quot; stri_trans_general(chr, &quot;Latin-ASCII&quot;) ## [1] &quot;ole, ole, ole, ola, Lula, Lula&quot; No exemplo acima, removemos os acentos da sequência de caracteres utilizando o American Standard Code for Information Interchange - ASCII. Se desejar uma solução caseira, o pacote txt4cs, que acompanha o livro, possui a função remove_accent(). Abaixo a sua aplicação: library(txt4cs) chr &lt;- &quot;olê, olê, olê, olá, Lula, Lula&quot; remove_accent(chr) Este capítulo tem inspiração nesse Wikibook.↩ "],
["stringR.html", "Capítulo 4 Strings no R 4.1 Strings e vetores 4.2 Strings e matrizes 4.3 Strings e data.frames 4.4 Strings e listas 4.5 Processamento básico 4.6 O pacote stringr 4.7 Regular Expressions no R", " Capítulo 4 Strings no R Na ciência da computação chamamos uma sequência de caracteres de string. Para o desenvolvimento de análises automatizadas de conteúdo, é necessário saber como processar esse tipo especial de dado (o texto como dado)3. Nesse sentido, três coisas são importantes de serem lembradas aqui: Computadores não interpretam letras. No limite, todos os caracteres são transformados em sequências compostas por zeros e uns. Logo, é através de padrões que caracteres são interpretados e os computadores armazenam os dados que retornam a nossos olhos. Programar é escrever! Não é à toa que chamamos as formas de escrita em programação de linguagens de programação. Nesse livro, por exemplo, usamos a linguagem R. Sabendo disso, o desafio de se trabalhar com o texto como dado é o desafio de fazer com que o computador diferencie código escrito do &quot;texto como dado&quot; que ele precisará processar de acordo com os interesses do analista. Como nós brasileiros lemos, o código e texto é processado pelo computador no seguinte sentido: da esquerda para a direita e de cima para baixo. Logo, ao desenvolver seu script é importante ter atenção em relação à ordem de escrita para que o computador possa desempenhar corretamente suas tarefas. É possível utilizar toda a versatilidade de estruturas de dados no R (vetores, matrizes, listas, data.frame, etc.) para processar sequências de caracteres. Como trabalhar com strings no R, portanto? 4.1 Strings e vetores Para declarar uma string, utilizamos aspas simples ' ou aspas dupla &quot;&quot;“. Vejamos o caso dos dois vetores abaixo, ambos recebendo a letra”a&quot;. # Vetores de caracteres caracter1 &lt;- &quot;a&quot; caracter2 &lt;- &#39;A&#39; class(caracter1) ## [1] &quot;character&quot; class(caracter2) ## [1] &quot;character&quot; Ambos são da classe character. 4.1.1 O R é case sensitive O R diferencia letras maiúsculas de letras minúsculas. Se compararmos os dois objetos criados acima, temos: caracter1 == caracter2 ## [1] FALSE 4.1.2 Sequências de caracteres # string txt &lt;- &quot;uma string é uma sequência de caracteres&quot; txt &lt;- &#39;também pode ser utilizada com aspas simples&#39; txt &lt;- &quot;no caso de aspas dupla, usa-se &#39;aspas simples&#39; na string&quot; txt &lt;- &#39;no caso de aspas simples, usa-se &quot;aspas dupla&quot; na string&#39; txt &lt;- &quot;para usar \\&quot;aspas dupla\\&quot; na string é necessário usar \\\\&quot; cat(txt) ## para usar &quot;aspas dupla&quot; na string é necessário usar \\ O R armazena a sequência de caracteres conforme ela é apresentada. Porém, é possível fazer uso de caracteres especiais para que o computador interprete e apresente o texto de forma adequada. Como vimos acima, o objeto txt armazena a string conforme foi redigida, mas com o uso da função cat() podemos apresentá-lo de forma adequada. Perceba a diferença entre o resultado e a sequência de caracteres que, de fato, foi armazenada no objeto txt. 4.1.3 Operações básicas com vetores de strings É possível declarar um vetor de caracteres vazio. # vetor de caracteres com 5 strings vazias palmeiras &lt;- character(5) palmeiras ## [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; Vejamos seu tamanho: length(palmeiras) # verificando o tamanho do vetor ## [1] 5 Vemos que o objeto palmeiras possui 5 elementos, todos sem qualquer conteúdo, mas da classe character. Será que é possível inserir conteúdo em elementos específicos do vetor? Vejamos: # incluindo string no primeiro e terceiro elementos do vetor palmeiras[1] &lt;- &quot;Quando surge o alviverde imponente&quot; palmeiras[3] &lt;- &quot;Sabe bem o que vem pela frente&quot; palmeiras ## [1] &quot;Quando surge o alviverde imponente&quot; &quot;&quot; ## [3] &quot;Sabe bem o que vem pela frente&quot; &quot;&quot; ## [5] &quot;&quot; Ótimo! Significa que podemos ter um vetor no com o Hino do Palmeiras, sendo cada um de seus elementos um verso dessa bela poesia. E seria possível ter um vetor cujos elementos fossem os hinos (sequências de caracteres/strings) de todos os times do país? Sim! 4.1.3.1 Atenção Um vetor com uma string vazia é diferente de um vetor sem strings # Atenção: str_vazia &lt;- &quot;&quot; # string vazia char_vazio &lt;- character(0) # caracter vazio length(str_vazia) ## [1] 1 length(char_vazio) ## [1] 0 4.1.4 Caracteres e outros tipos de dados É importante saber como o R processa o texto como dado (character) em conjunto com outros formatos. frase &lt;- &quot;Campeonatos Brasileiros vencidos pelo Palmeiras.&quot; is.numeric(frase) ## [1] FALSE is.character(frase) ## [1] TRUE Acima verificamos que a classe do objeto frase é de tipo character. quantidade &lt;- 5 + 5 quantidade ## [1] 10 is.numeric(quantidade) ## [1] TRUE is.character(quantidade) ## [1] FALSE Acima verificamos que a classe do objeto quantidade é de tipo numeric. Seria possível converter de um tipo para outro? # convertendo quantidade quantidade &lt;- as.character(quantidade) quantidade ## [1] &quot;10&quot; is.character(quantidade) ## [1] TRUE Sim! Veja que agora o valor 10 aparece entre aspas, pois o objeto quantidade foi convertido para a classe character. E se um vetor possuir números e caracteres em diferentes elementos, como o R interpreta a classe desse vetor? # vetor com números e strings brasileiros &lt;- c(10, &quot;Campeonatos Brasileiros vencidos pelo Palmeiras.&quot;) brasileiros ## [1] &quot;10&quot; ## [2] &quot;Campeonatos Brasileiros vencidos pelo Palmeiras.&quot; class(brasileiros) ## [1] &quot;character&quot; Perceba que o vetor é declarado com o número 10 no primeiro elemento e uma string no segundo elemento. Contudo, o R adota um critério de coerção de dados para que o vetor seja da classe character. Por isso, o número 10 é automaticamente convertido como caracter. O R segue duas regras básicas de coerção de tipos de dados: Se uma cadeia de caracteres estiver presente em um vetor, todo o resto do vetor será convertido em cadeias de caracteres. Se um vetor tiver apenas elementos lógicos e números, os elementos lógicos serão convertidos em números; Valores TRUE se tornam 1 e os valores FALSE se tornam 0. 4.2 Strings e matrizes No R matrizes são estruturas de dados que suportam apenas um tipo de classe de dados. Logo, assim como no caso do vetor visto anteriormente, ao constatar a presenção de alguma entrada de classe character automaticamente todos os elementos da matriz são convertidos. # Matrizes ---- m &lt;- rbind(c(1:5), letters[1:5]) m ## [,1] [,2] [,3] [,4] [,5] ## [1,] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; ## [2,] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; class(m) ## [1] &quot;matrix&quot; 4.3 Strings e data.frames data.frames são as estruturas de dados mais utilizadas no R. Sua versatilidade permite ter no mesmo objeto dados de classes diferentes num formato de matriz (matriz de dados). Vejamos: # Data Frames ---- df1 &lt;- data.frame(numeros = 1:5, letras = letters[1:5]) str(df1) ## &#39;data.frame&#39;: 5 obs. of 2 variables: ## $ numeros: int 1 2 3 4 5 ## $ letras : Factor w/ 5 levels &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,..: 1 2 3 4 5 Como padrão da função data.frame() strings são transformadas em fatores. Para manter strings como caracteres deve-se usar o argumento: stringsAsFactors = FALSE. df1 &lt;- data.frame(numeros = 1:5, letras = letters[1:5], stringsAsFactors = FALSE) str(df1) ## &#39;data.frame&#39;: 5 obs. of 2 variables: ## $ numeros: int 1 2 3 4 5 ## $ letras : chr &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ... 4.4 Strings e listas Das estruturas de objetos mais populares no R, listas são as mais complexas. Sua grande vantagem em relação às demais estruturas é permitir uma organização hierárquica dos dados independente de sua classe e tamanho. Vejamos um exemplo: # Listas ---- # listas contemplam qualquer tipo de estrutura de dados ls &lt;- list(1:10, letters[1:5], rnorm(5), m) ls ## [[1]] ## [1] 1 2 3 4 5 6 7 8 9 10 ## ## [[2]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; ## ## [[3]] ## [1] 0.6988487 0.5571082 -2.5164338 -0.4833571 1.5472155 ## ## [[4]] ## [,1] [,2] [,3] [,4] [,5] ## [1,] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; ## [2,] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; No exemplo acima, o objeto ls é composto por quatro elementos que contêm, cada um, diferentes tamanhos e diferentes estruturas de dados. 4.5 Processamento básico 4.5.1 Contando caracteres A função nchar() é um forma ágil e fácil de se obter o número de caracteres de uma string ou de strings de um vetor. nchar(c(&quot;Quantos&quot;, &quot;caracteres?&quot;)) ## [1] 7 11 nchar(&quot;Quantos caracteres?&quot;) ## [1] 19 No exemplo acima, perceba que a função contabiliza o espaço entre palavras como caracter. Por isso, a soma do total de caracteres do primeiro caso (\\(7 + 11 = 18\\) caracteres) não é igual ao total de caracteres do segundo (\\(19\\) caracteres). 4.5.2 toupper(), tolower() Sendo o R case sensitive, para o processamento do texto como dado, pode ser de interesse do pesquisador harmonizar o conteúdo sob análise com o objetivo de ter todos os caracteres em formato maiúsculo ou minúsculo. As funções toupper() e tolower() desempenham bem esse papel. tolower(c(&quot;TUdo eM MinúsCuLA&quot;, &quot;ABCDE&quot;)) ## [1] &quot;tudo em minúscula&quot; &quot;abcde&quot; toupper(c(&quot;TUdo eM mAiúsCula&quot;, &quot;ABCDE&quot;)) ## [1] &quot;TUDO EM MAIÚSCULA&quot; &quot;ABCDE&quot; 4.5.2.1 Recortando strings: substr(), substring(). Para o processamento do texto como dado, também pode ser de interesse do pesquisador a seleção de trechos de uma sequência de caracteres. Isso pode ser facilmente feito com as funções substr() e substring() indicando como parâmetros a posição nas quais a string deve ser recortada. substr(&quot;O Palmeiras é o time da virada, o Palmeiras é o time do amor.&quot;, 1, 30) ## [1] &quot;O Palmeiras é o time da virada&quot; substring(&quot;O Palmeiras é o time da virada, o Palmeiras é o time do amor.&quot;, 33, 60) ## [1] &quot;o Palmeiras é o time do amor&quot; 4.5.2.2 União, Intersecção, Diferença, Igualdade Operações com vetores de forma geral podem ser aplicadas a vetores com strings. Podemos, por exemplo, unir diferentes vetores. # União vec1 &lt;- c(&quot;algumas&quot;, &quot;palavras&quot;, &quot;aleatória&quot;, &quot;aqui&quot;) vec2 &lt;- c(&quot;e&quot;, &quot;algumas&quot;, &quot;palavras&quot;, &quot;ali&quot;) union(vec1, vec2) ## [1] &quot;algumas&quot; &quot;palavras&quot; &quot;aleatória&quot; &quot;aqui&quot; &quot;e&quot; &quot;ali&quot; Verificar a intersecção entre dois vetores. # Intersecção intersect(vec1, vec2) ## [1] &quot;algumas&quot; &quot;palavras&quot; Verificar a diferença entre dois vetores. # Diferença setdiff(vec1, vec2) ## [1] &quot;aleatória&quot; &quot;aqui&quot; E a igualdade de elementos entre dois vetores. No caso, entre o vetor vec1 e ele mesmo. # Igualdade identical(vec1, vec1) ## [1] TRUE 4.5.2.3 Elemento contido em Outra operação básica de interesse é a verificação se um elemento (no caso, uma sequência de caracteres) está contido num objeto. Vamos verificar abaixo se a sequência “aqui” está contida no vetor vec1 através do operador %in%. # Elemento contido em ---- elem &lt;- &quot;aqui&quot; elem %in% vec1 ## [1] TRUE É importante destacar que o exemplo acima é uma operação básica de vetores no R e não exclusiva para sequência de caracteres. Nesse sentido, ela apenas checa se no vetor vec1 há algum elemento idêntico ao padrão “aqui”. Mais adiante verificaremos como identificar a presença de sequências de caracteres no interior de outras strings sem que tenham de ser idênticas. 4.5.2.4 Ordenação É possível ordenar um vetor de strings em ordem alfabética ou em sentido oposto como no exemplo abaixo. Tal versatilidade pode ser útil para o ordenamento de uma matriz de dados completa com base numa variável de nomes, por exemplo. # Ordenando ---- sort(vec1, decreasing = TRUE) ## [1] &quot;palavras&quot; &quot;aqui&quot; &quot;algumas&quot; &quot;aleatória&quot; 4.6 O pacote stringr O pacote stringr integra uma coleção de pacotes projetados para a ciência de dados, o tidyverse. Combinado ao pacote stringi, você terá acesso a praticamente todas as possíveis funções necessárias para o processamento de strings em mais alto nível. Existem quatro famílias principais de funções no stringr: Manipulação de caracteres: essas funções permitem que você manipule caracteres individuais dentro de sequências de caracteres. Ferramentas de espaço em branco para adicionar, remover e manipular espaços. Operações sensíveis à localização geográfica, cujas operações irão variar de local para local. Funções de correspondência de padrões, sendo o mais comum as expressões regulares. Além do que veremos neste material, é altamente recomendável a consulta ao capítulo sobre strings do R for Data Science. # carregando pacote ---- library(stringr) 4.6.1 Verificando o tamanho de uma string4 str_length(&quot;O Palmeiras é o time da virada, o Palmeiras é o time do amor.&quot;) ## [1] 61 4.6.2 Identificando caracter numa posição específica. # vetor de strings txt &lt;- c(&quot;O Palmeiras é o time da virada&quot;, &quot;o Palmeiras é o time do amor.&quot;) Selecionando o terceiro caracter. # identificando terceira letra str_sub(txt, 3, 3) ## [1] &quot;P&quot; &quot;P&quot; Selecionando do segundo caracter de trás pra frente. str_sub(txt, 2, -2) ## [1] &quot; Palmeiras é o time da virad&quot; &quot; Palmeiras é o time do amor&quot; 4.6.3 Incluindo caracter ou string numa posicao específica. str_sub(txt, 3, 11) &lt;- &quot;PALMEIRAS&quot; txt ## [1] &quot;O PALMEIRAS é o time da virada&quot; &quot;o PALMEIRAS é o time do amor.&quot; Preencher uma string em tamanho fixo. str_pad(txt, 50) # por padrão: left ## [1] &quot; O PALMEIRAS é o time da virada&quot; ## [2] &quot; o PALMEIRAS é o time do amor.&quot; Remove espaço extra. txt &lt;- str_pad(txt, 50) # por padrão: left str_trim(txt) ## [1] &quot;O PALMEIRAS é o time da virada&quot; &quot;o PALMEIRAS é o time do amor.&quot; 4.6.4 Recortando uma string para obter parte da sequência de caracteres. str_sub(txt, start = 3, end = 11) ## [1] &quot; &quot; &quot; &quot; É possível fazer o recorte usando índices de trás pra frente. str_sub(txt, start = -14, end = -1) ## [1] &quot;time da virada&quot; &quot; time do amor.&quot; Extração de palavras. word(txt, 2) ## [1] &quot;&quot; &quot;&quot; word(txt, -1) ## [1] &quot;virada&quot; &quot;amor.&quot; 4.7 Regular Expressions no R Até aqui você viu funções básicas e intermediárias para o processamento de sequências de caracteres no R. Para avançar, é necessário aprender o uso de expressões regulares ( Regular Expressions ). Como definido no livro Handling Strings with R, uma expressão regular é um conjunto de símbolos que descreve um padrão de texto. Mais formalmente, uma expressão regular é um padrão que descreve um conjunto de cadeias de caracteres. Como o termo “expressão regular” é bastante longo, a maioria das pessoas usa a palavra regex para se referir à área. Entre outras tarefas, o uso de expressões regulares pode ajudá-lo a (Wickham and Grolemund 2017): Determinar cadeias de caracteres correspondentes a um padrão. Encontrar as posições de padrões correspondentes. Extrair o conteúdo de padrões correspondentes. Substituir o padrão correspondente por novos valores. Dividir uma sequência com base na correspondência de um padrão determinado. No entanto, é preciso ter atenção, pois o uso de expressões regulares pode se tornar uma tarefa realmente complexa. Veja esta discussão do StackOverflow a respeito de seu uso para identificação de endereços de e-mail, por exemplo. Dada a complexidade que a área pode assumir, vamos verificar o uso das regex em algumas funções do pacote stringr com base nesse tutorial. Junto a ele, é recomendável que a leitura atenta do ?regex no R. 4.7.1 Identificação e Extração de padrão txt &lt;- c(&quot;O Palmeiras é o time da virada&quot;, &quot;o Palmeiras é o time do amor.&quot;) str_extract(txt, &quot;amor&quot;) ## [1] NA &quot;amor&quot; str_detect(txt, &quot;amor&quot;) ## [1] FALSE TRUE Utilizando o operador | (“OU”): str_detect(c(&quot;presidente&quot;, &quot;presidencialismo&quot;, &quot;presidencialista&quot;, &quot;parlamentarismo&quot;), &quot;ente|ismo&quot;) ## [1] TRUE TRUE FALSE TRUE str_extract(c(&quot;presidente&quot;, &quot;presidencialismo&quot;, &quot;presidencialista&quot;, &quot;parlamentarismo&quot;), &quot;ente|ismo&quot;) ## [1] &quot;ente&quot; &quot;ismo&quot; NA &quot;ismo&quot; str_extract(c(&quot;presidente&quot;, &quot;presidencialismo&quot;, &quot;presidencialista&quot;, &quot;parlamentarismo&quot;), &quot;(presidencial|parlamentar)ismo&quot;) ## [1] NA &quot;presidencialismo&quot; NA &quot;parlamentarismo&quot; Usar o “.” corresponde a qualquer caracter exceto uma nova linha: txt &lt;- c(&quot;presidente&quot;, &quot;presidencialismo&quot;, &quot;presidencialista&quot;, &quot;parlamentarismo&quot;) str_extract(txt, &quot;..a.....&quot;) ## [1] NA &quot;cialismo&quot; &quot;cialista&quot; &quot;rlamenta&quot; Para identificar o “.” de fato, usamos “\\.”. Para poder usar a “\\”, adicionamos mais uma e temos: txt &lt;- c(&quot;O Palmeiras é o time da virada&quot;, &quot;o Palmeiras é o time do amor.&quot;) str_detect(txt, &quot;\\\\.&quot;) ## [1] FALSE TRUE Para identificar a “\\” de fato, usamos “\\\\”: txt &lt;- c(&quot;O Palmeiras é o time da virada \\\\ o Palmeiras é o time do amor.&quot;) writeLines(txt) ## O Palmeiras é o time da virada \\ o Palmeiras é o time do amor. str_detect(txt, &quot;\\\\.&quot;) ## [1] TRUE 4.7.2 Substituição txt &lt;- c(&quot;O Palmeiras é o time da virada&quot;, &quot;o Palmeiras é o time do amor.&quot;) str_replace(txt, &quot;Palmeiras&quot;, &quot;PALMEIRAS&quot;) ## [1] &quot;O PALMEIRAS é o time da virada&quot; &quot;o PALMEIRAS é o time do amor.&quot; 4.7.3 Âncoras Por padrão, expressões regulares buscam por correspondência em qualquer parte de uma sequência de caracteres. Porém, é extremamente útil poder ancorar a busca pela correspondência no início ou no final de uma string. Podemos usar: “^” para coincidir com o início da string. “$” para coincidir com o final da string. txt &lt;- c(&quot;O Palmeiras é o time da virada&quot;, &quot;o Palmeiras é o time do amor.&quot;) str_detect(txt, &quot;^O&quot;) ## [1] TRUE FALSE str_detect(txt, &quot;\\\\.$&quot;) ## [1] FALSE TRUE Referências "],
["scrape.html", "Capítulo 5 Obtenção de conteúdo 5.1 word, excel ou .pdf 5.2 Webscraping 5.3 Web Services 5.4 Download de arquivos da web 5.5 Twitter 5.6 Imagens 5.7 Áudio Transcrição", " Capítulo 5 Obtenção de conteúdo Davi Moreira, Mônica Rocabado Uma das tarefas mais importantes para a análise de conteúdo consiste na sua própria busca e aquisição. O R nos ajuda nessa tarefa a partir de distintas estratégias. A seguir apresento aquelas nas quais o uso de técnicas computacionais e programação potencializa o alcance e escala de acervos a serem utilizados para pesquisas. 5.1 word, excel ou .pdf Caso tenha realizado surveys com perguntas abertas ou possua conteúdo de texto organizado em formato de documento ou tabulado é possível utilizar o R para analisá-las. Para arquivos em formato excel pode-se usar o pacote readxl com a função read_excel, funciona de forma similar ao exemplo em de leitura de arquivos em .csv. Para leitura de arquivos .txt, .csv, entre outros, recomenda-se utilizar o pacote readr. Vejamos um exemplo: 5.1.1 .xlsx SPLegis A Câmara dos Vereadores de São Paulo publica dados de sua atividade no portal SPLegis. Entre as informações disponíveis, é possível obter relatórios dos projetos com o conteúdo de todas as ementas através do download de um arquivo em formato .xlsx! library(readxl) arquivo_excel &lt;- read_excel(&quot;Emendas Apresentadas.xlsx&quot;) 5.1.2 .pdf e .doc Chico PDF Antes de achar que os dados de um arquivo .pdf ou .doc são um obstáculo para a abordagem do texto como dado, diferentes estratégias podem ser adotadas para sua obtenção e processamento. Com o uso do pacote textreadr, por exemplo, de forma simples pode-se transformar o conteúdo do arquivo .pdf num arquivo .txt. Vejamos o conteúdo do discurso de posse do ex-presidente Luis Inácio Lula da Silva realizado em 01 de janeiro de 2003 no Congresso Nacional: library(textreadr) # lendo arquivo .pdf txt &lt;- read_document(&quot;https://raw.githubusercontent.com/davi-moreira/txt4cs/master/data/lula-pronunciamento-posse-cd-2003.pdf&quot;) # salvando como .txt writeLines(txt, &quot;lula-pronunciamento-posse-cd-2003.txt&quot;) Em breve, o Projeto BRAPRSpeech disponibilizará conteúdo e meta-dados de quase 7 mil discursos proferidos pelos presidentes brasileiros da Nova República classificados em áreas temáticas. Divulgaremos! 5.2 Webscraping Webscraping O Webscraping consiste na possibilidade de uso de programação para raspagem de dados da web, ou seja a obtenção de conteúdo presente na web. Nesse sentido, suponha que ao invés de montar uma equipe que irá acessar páginas na web para coletar seu conteúdo, você desenvolverá um programa específico para realizar essa tarefa com foco sobre os objetivos de sua pesquisa. 5.2.1 Pacotes para raspagem de dados Há diversos pacotes para raspagem de dados com o R. Abaixo segue um lista com os principais. Para referências sobre seu uso, consulte os links indicados, este tutorial sobre o rvest e este capitulo sobre web scraping. httr xml2 rvest Como o site Curso-R destaca, esses pacotes não são suficientes para acessar todo tipo de conteúdo da web. Páginas com conteúdo produzido na linguagem javascript, por exemplo, precisam de outras ferramentas para acesso a seu conteúdo. Nesses casos, é necessário “simular” um navegador que acessa a página web e realiza consultas. Uma das melhores ferramentas para isso é o selenium, abaixo indicado. RSelenium 5.2.2 Etapas para raspagem de dados na web O processo de raspagem dos dados consiste nas seguintes etapas: Etapa 1: Conhecer detalhadamente o caminho para acesso aos dados Qual o caminho que um usuário necessita realizar para obter os dados? É necessário preencher um formulário ou assinalar um Recapctha? Etapa 2: Armazenar todos os caminhos de acesso aos dados de forma amigável ao programa Caso exista um caminho para obter esse dado, deve ser registrado Não é necessário realizar esse procedimento em todos as páginas que for realizar, mas é desejável. Etapa 3: Obter os dados: raspagem de fato Etapa 4: Processar os dados obtidos 5.2.3 Código fonte Toda página na internet possui um código-fonte - muitas vezes em html - que indica e cria o conteúdo de forma visual para página. Ao clicar na página desejada com o botão direito do mouse e selecionar “código fonte” ou digitar CRTL + U, pode-se visualizá-lo. Vejamos um exemplo: Câmara dos Deputados Ao acessar o código fonte dessa página do portal da Câmara dos Deputados, você consegue visualizar o código .html que produz toda visualização, incluindo o conteúdo do discurso proferido pelo então deputado Jair Bolsonaro em 17 de Agosto de 20105. 5.2.4 Obtenção de Código Fonte - Exemplo: Se é possível visualizar o conteúdo, é possível obtê-lo de forma automatizada. Vamos, portanto, obter o conteúdo do discurso proferido pelo então deputado Jair Bolsonaro em 17 de Agosto de 20106. Vamos utilizar as Etapas anteriormente apresentadas: De uma só vez, conseguimos cumprir as Etapas 1 e 2 com o código abaixo: Etapa 1: Conhecer detalhadamente o caminho para acesso aos dados: no nosso exemplo, o código fonte do endereço virtual que apresenta o discurso também nos apresenta o conteúdo publicado. Etapa 2: Armazenar todos os caminhos de acesso aos dados de forma amigável ao programa: nesse exemplo, trata-se de apenas um endereço que armazenamos no objeto link. # carregando pacotes ---- library(tidyverse) library(rvest) library(httr) library(xml2) # definindo o endereço da web link &lt;- &quot;https://www.camara.leg.br/internet/SitaqWeb/TextoHTML.asp?etapa=5&amp;nuSessao=174.4.53.O&amp;nuQuarto=56&amp;nuOrador=2&amp;nuInsercao=0&amp;dtHorarioQuarto=11:46&amp;sgFaseSessao=BC&amp;Data=17/08/2010&amp;txApelido=JAIR%20BOLSONARO,%20PP-RJ&amp;txFaseSessao=Breves%20Comunica%C3%A7%C3%B5es&amp;txTipoSessao=Extraordin%C3%A1ria%20-%20CD&amp;dtHoraQuarto=11:46&amp;txEtapa=&quot; Etapa 3: Obter os dados: Podemos facilmente obter o código fonte de um endereço na internet com o uso da função readLines. Aplicamos, portanto, a função no objeto link e atribuímos seu resultado ao objeto conteudo. # obtem o codigo fonte conteudo &lt;- readLines(link) Veja que o objeto conteudo é um vetor cujos elementos são cada uma das linhas presentes no código fonte da página. Isso significa que não precisamos mais do acesso à internet ou do próprio endereço para processar o conteúdo obtido uma vez que já está retido no seu ambiente de trabalho no R. Nessa etapa, pode ser conveniente salvar o objeto conteudo em seu formato bruto para posterior tratamento. Etapa 4: Processar os dados obtidos: Para finalizar nossa tarefa, uma rápida análise do objeto conteudo (código fonte da página que publicou o discurso), nos mostra que o elemento 328 do vetor apresenta o conteúdo de interesse. Veja que, nesse caso, a análise do próprio código fonte da página da Câmara dos Deputados apresenta o conteúdo do discurso na linha 328 do código html. Para processar os dados obtidos, vamos selecionar apenas o elemento 328 e assim concluímos nossa missão. conteudo &lt;- conteudo[328] 5.2.4.1 Atividade prática Com base no exemplo acima, obtenha o código fonte da página do Chico Buarque na Wikipédia. 5.3 Web Services Os Web services são utilizados para disponibilizar serviços interativos na Web, podendo ser acessados por outras aplicações. O objetivo dos Web Services é a comunicação de aplicações através da Internet. Um dos motivos que tornam os Web Services atrativos para a obtenção de dados e conteúdo é o fato deste serviço ser desenvolvido com base em tecnologias standards, em particular XML e HTTP (Hypertext Transfer Protocol). 5.3.1 Obtenção de conteúdo via WS - Exemplo: A Câmara dos Deputados do Brasil possui um excelente serviço de transparência. Estimulado pela iniciativa do Laboratório Hacker, foi desenvolvido o Web service da Câmara dos Deputados. Após a realização da Primeira Maratona Hacker da Câmara dos Deputados em 2013, quando fora desenvolvido o Projeto Retórica Parlamentar, o Web Service da CD passou a disponibilizar os discursos proferidos pelos deputados federais em plenário. September 11th - The Washington Post Os ataques terroistas de 11 de setembro de 2001 chocaram o mundo e os deputados federais brasileiros não ficaram em silêncio diante de fato tão relevante. Nossa tarefa será a de obter os dados e o conteúdo dos discursos proferidos nesse dia terrível. Em virtude da estrutura de disponibilização dos dados no WebService da Câmara dos Deputados, nossa tarefa será dividida em duas subtarefas: obter os meta-dados dos discursos; obter o conteúdo dos discursos (inteiror teor). Em breve, o Projeto BRAParlSpeech disponibilizará conteúdo e meta-dados de quase 300 mil discursos de parlamentares brasileiros classificados em áreas temáticas. Divulgaremos! 5.3.2 a) obter os meta-dados dos discursos Vamos utilizar as Etapas anteriormente apresentadas: De uma só vez, conseguimos realizar as Etapas 1 e 2: Etapa 1: Conhecer detalhadamente o caminho para acesso aos dados: Conhecendo exatamente como deve ser a chamada (o endereço que dá acesso aos dados), podemos simplesmente passar os parâmetros. Os parâmetros podem ser encontrados no guia do WebService. No nosso exemplo, temos como parâmetros a data inicial (dataInicial) e a data final (dataFinal) de busca pelos discursos. Sendo nosso objetivo obter os discursos proferidos num mesmo dia, usamos como parâmetros “11/09/2001”. Etapa 2: Armazenar todos os caminhos de acesso aos dados de forma amigável ao programa: Nesse exemplo, trata-se de apenas um endereço que armazenamos no objeto link. # pacotes library(httr) library(XML) library(xml2) library(RCurl) library(tidyverse) library(stringr) # definindo parametros da chamada dataInicial &lt;- &quot;11/09/2001&quot; dataFinal &lt;- &quot;11/09/2001&quot; # alocando enderenço a objeto link link &lt;- paste(&quot;https://www.camara.leg.br/sitcamaraws/SessoesReunioes.asmx/ListarDiscursosPlenario?&quot;, &quot;dataIni=&quot;, dataInicial, &quot;&amp;dataFim=&quot;, dataFinal, &quot;&amp;codigoSessao=&amp;parteNomeParlamentar=&amp;siglaPartido=&amp;siglaUF=&quot;, sep = &quot;&quot;) Etapa 3: Obter os dados: Para essa etapa, basta fazer uso da função GET. No código abaixo, armazenamos os resultados no objeto response. response &lt;- GET(link) Etapa 4: Processar os dados obtidos: Organizar o resultado da função GET num formato de matriz de dados (data.frame) é simples. Primeiro, transformamos o resultado numa lista, na qual cada elemento será uma das sessões legislativas realizadas naquela data. Em segundo lugar, de forma interativa, usando a função for, alocamos os campos desejados num objeto data.frame7. # analisa um arquivo XML ou HTML e gera uma estrutura no R. data &lt;- xmlParse(response, encoding = &quot;UTF-8&quot;) # transforma um XML nó em lista. Importante pois permite você reconhecer o caminho para obtenção dos dados. Exemplo: &quot;$sessao$fasesSessao$faseSessao$discursos$discurso$sumario&quot; ls &lt;- xmlToList(data) # data frame que recebera dados dos pronunciamentos bd &lt;- data.frame() for (i in 1:length(ls)){ # obtendo quantidade de pronunciamentos de uma respectiva sessao quantPronunciamentos &lt;- length(ls[i]$sessao$fasesSessao$faseSessao$discursos) sumario &lt;- vector(&quot;character&quot;) numInsercao &lt;- vector(&quot;character&quot;) numQuarto &lt;- vector(&quot;character&quot;) indexacao &lt;- vector(&quot;character&quot;) hora &lt;- vector(&quot;character&quot;) uf &lt;- vector(&quot;character&quot;) numOrador &lt;- vector(&quot;character&quot;) nomeOrador &lt;- vector(&quot;character&quot;) partido &lt;- vector(&quot;character&quot;) for(j in 1:quantPronunciamentos){ # obtendo todos os dados do pronunciamento # sumario sumario[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$sumario) # insercao numInsercao[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$numeroInsercao) # quarto numQuarto[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$numeroQuarto) # indexacao indexacao[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$txtIndexacao) # hora hora[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$horaInicioDiscurso) # uf orador uf[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$orador$uf) # numero orador numOrador[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$orador$numero) # nome orador nomeOrador[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$orador$nome) # partido orador partido[j] &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$discursos[[j]]$orador$partido) } # obtendo todos os dados da fase # codigo codigoFase &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$codigo) # descricao descricaoFase &lt;- str_trim(ls[i]$sessao$fasesSessao$faseSessao$descricao) # obtendo todos os dados da sessao # codigo codigoSessao &lt;- str_trim(ls[i]$sessao$codigo) # data dataSessao &lt;- str_trim(ls[i]$sessao$data) # numero numSessao &lt;- str_trim(ls[i]$sessao$numero) # tipo tipoSessao &lt;- str_trim(ls[i]$sessao$tipo) bdTemp &lt;- data.frame(codigoSessao = rep(codigoSessao, length(nomeOrador)), dataSessao = rep(dataSessao, length(nomeOrador)), numSessao = rep(numSessao, length(nomeOrador)), tipoSessao = rep(tipoSessao, length(nomeOrador)), codigoFase = rep(codigoFase, length(nomeOrador)), descricaoFase = rep(descricaoFase, length(nomeOrador)), numInsercao = numInsercao, numQuarto = numQuarto, hora = hora, numOrador = numOrador, nomeOrador = nomeOrador, uf = uf, partido = partido, indexacao = indexacao, sumario = sumario) bd &lt;- rbind(bd, bdTemp) } Com o objeto bd acima, concluímos a primeira subetapa e podemos seguir para a segunda. 5.3.3 b) obter o conteúdo dos discursos (inteiror teor).** Importante ressaltar que essa etapa só é possível tendo realizado o método acima de ListarDiscursosPlenário, devido exigência do próprio WebService. bdDados &lt;- bd bd &lt;- data.frame() # data frame que recebera os pronunciamentos for( i in 1:dim(bdDados)[1]){ link &lt;- paste(&quot;https://www.camara.leg.br/SitCamaraWS/SessoesReunioes.asmx/obterInteiroTeorDiscursosPlenario?&quot;, &quot;codSessao=&quot;, bdDados$codigoSessao[i], &quot;&amp;numOrador=&quot;, bdDados$numOrador[i], &quot;&amp;numQuarto=&quot;, bdDados$numQuarto[i], &quot;&amp;numInsercao=&quot;, bdDados$numInsercao[i], sep = &quot;&quot;) print(link) response &lt;- GET(link) data &lt;- xmlParse(response, encoding = &quot;UTF-8&quot;) ls &lt;- xmlToList(data) bdTemp &lt;- data.frame(nome = ls$nome, partido = ls$partido, uf = ls$uf, horaInicioDiscurso = ls$horaInicioDiscurso, discursoRTFBase64 = ls$discursoRTFBase64) bd &lt;- rbind(bd, bdTemp) Sys.sleep(.5) } Obtivemos os discursos em seu inteiro teor! No entanto, os dados estão em formato RTF codificado em Base64. Precisamos transformá-los em formato de texto plano para possibilitar sua leitura. Para tal vamos utilizar o pacote txt4cs que possui a função decode_rtfPTBRA. devtools::install_github(&quot;davi-moreira/txt4cs-pkg&quot;, force = TRUE) library(txt4cs) bd$discursoRTFBase64 &lt;- as.character(bd$discursoRTFBase64) bd$discursoPlainTxt &lt;- vector(mode = &quot;character&quot;, length = dim(bd)[1]) for (i in 1:dim(bd)[1]){ bd$discursoPlainTxt[i] &lt;- decode_rtfPTBRA(bd$discursoRTFBase64[i]) # print( bd$discursoPlainTxt) } nome partido uf discursoPlainTxt EFRAIM MORAIS (PRESIDENTE) PFL PB O SR. PRESIDENTE (Efraim Moraes) - Nos termos do 3 do art. 60 da Constituição Federal, declaro promulgada a Emenda Constitucional n 32, de 2001. (Palmas.) EFRAIM MORAIS (PRESIDENTE) PFL PB O SR. PRESIDENTE (Efraim Morais) Nobre Deputado, tratando-se de sessão solene, não serão admitidas questões de ordem. Pedimos a compreensão de V.Exa., que tem conhecimento do teor do art. 56 do Regimento Interno. Queremos conduzir a sessão dentro do que estabelece o Regimento. Comunico a V.Exa. que já se encontra marcada sessão do Congresso Nacional para amanhã, às 14h, quando V.Exa. terá oportunidade de formular sua questão de ordem. MIRO TEIXEIRA PDT RJ O SR. MIRO TEIXEIRA (PDT-RJ) Não formularei questão de ordem. Apenas sugiro a V.Exa. que marque sucessivas sessões do Congresso Nacional para que possamos cumprir o que dispõe o art. 2 da Emenda a ser promulgada nesta sessão solene, ou seja, votar as medidas provisórias editadas até agora. Lamento a atitude da Mesa de retirar o som dos microfones do plenário. O Parlamentar, no exercício do seu mandato, é responsável por levar suas questões à Mesa e deve ouvir o que o Presidente diz, como eu ouço V.Exa. agora e me resigno. Agradeço a atenção, mas sem tirar o som dos microfones do plenário, porque é nosso direito pedir a palavra. AÉCIO NEVES PSDB MG O SR. AÉCIO NEVES (PSDB-MG. Sem revisão do orador.) Exmo. Sr. Deputado Efraim Morais, ilustre Presidente em exercício do Congresso Nacional; Exmo. Sr. Senador Edison Lobão, Presidente do Senado Federal; Exmo. Sr. Deputado e Ministro Aloysio Nunes Ferreira, representando o Exmo. Sr. Presidente da República Fernando Henrique Cardoso; Exmo. Dr. Paulo da Costa Leite, ilustre Presidente do Superior Tribunal de Justiça e hoje representando o Poder Judiciário; excelentíssimos senhores membros das Mesas Diretoras do Senado Federal e da Câmara dos Deputados, Srs. Líderes partidários, Sras. e Srs. Parlamentares, autoridades convidadas a esta solenidade, o ilustre Presidente do Senado há pouco nos brindou com o histórico das medidas provisórias no Parlamento brasileiro desde sua origem no Estado Novo, quando fechou a Constituição e estabeleceu a possibilidade de o Presidente da República legislar por decretos-leis, instrumento que foi extinto com a Constituinte de 1946, mas que depois retornou no ciclo dos governos militares. É desnecessário que eu faça outro histórico parecido. Pretendo apenas dizer aos meus pares da Câmara dos Deputados e do Senado Federal que hoje é um dia histórico não apenas para o Parlamento brasileiro mas também para a democracia. Não tenho dúvidas de que ao promulgarmos hoje essa Emenda à Constituição resgatamos a essência do Poder Legislativo: a capacidade de iniciativa para legislar. Com a participação de cada um dos Líderes partidários, de todos os partidos sem exceção, produzimos enorme entendimento para o qual foi absolutamente fundamental e de público fica este meu registro a compreensão do Poder Executivo, na pessoa do Deputado e hoje Ministro Aloysio Nunes Ferreira, dos Líderes nesta Casa, Deputado Arnaldo Madeira e Arthur Virgílio; elaboramos um texto que possibilitará, a partir de agora e nos próximos anos, o reequilíbrio institucional neste País. Não interessa a nenhum governo circunstancial um Parlamento frágil. Construímos, através das negociações que nos levaram ao texto ora promulgado, uma proposta de equilíbrio, em que o Parlamento reassegura esta que é sua ação prioritária e primária e, ao mesmo tempo, em que o Poder Executivo não se vê maneteado, tolhido de instrumentos absolutamente essenciais ao enfrentamento de crises que possam vir. Portanto, no momento em que este plenário é cenário da sanção deste projeto, sem sombra de dúvidas é um dos grandes momentos vividos por esta Casa. Se alguns ainda não perceberam a dimensão e a profundidade do que estamos vivendo neste instante, certamente o tempo e a história haverão de ser pedagógicos e mostrar que a partir desta terça-feira inicia-se o tempo de uma nova relação de independência, de altivez e, sobretudo, de equilíbrio entre os Poderes. Por isso, é absolutamente fundamental, além da presença do Ministro Aloysio Nunes, um dos que, na qualidade de Deputado, participaram do início das discussões sobre esse texto, a presença do digno representante do Poder Judiciário brasileiro, Ministro Costa Leite, que dizia esta semana considerar o Parlamento o pulmão da democracia. Pois bem, Sr. Presidente. A democracia passa a respirar melhor a partir de hoje, renovada não apenas em suas regras institucionais, mas certamente também no seu espírito, na sua determinação de possibilitar que este País continue avançando, respeitando o equilíbrio institucional, mas cada um fazendo sua parte: Judiciário, Legislativo e Executivo, repito, com autonomia e independência, construindo um País mais justo, mais solidário. Era este o registro que gostaria de fazer nesta singela sessão, mas que tenho a certeza traz um componente de extrema relevância para cada um daqueles que optou na vida pelo exercício da atividade Parlamentar, certamente a mais importante de todas aquelas exercidas na democracia. Não poderia, no momento em que ocupo pela primeira vez a tribuna desta Casa, após os acontecimentos que hoje tomaram conta do mundo, de forma muito simples, mas muito clara, deixar de dizer algumas palavras em nome dos meus pares e daqueles que aqui julgamos representar. Em nome, portanto, da Câmara dos Deputados e dos cidadãos que seus membros representam, expresso, desta tribuna, meu profundo pesar pelos atos de terrorismo ocorridos em Nova York. Enquanto seus autores não forem conhecidos no país, não poderemos atribuir responsabilidade política ou ideológica a ninguém, mas podemos condenar com veemência o apelo à loucura; o uso de meios e métodos que atingem pessoas inocentes e desarmadas. Os episódios mostram, no entanto, que os homens simples do mundo reclamam lucidez de seus dirigentes e pedem tolerância. Para que tenhamos paz, temos de ser tolerantes com os que pensam diferentes de nós; os que acreditam em outros deuses; os que desejam outra forma de convívio social que lhes pareça melhor. Estamos solidários com os feridos e com a família dos que morreram e pedimos a Deus que nos dê a paz de que tanto necessitamos. Muito obrigado. (Palmas.) EFRAIM MORAIS (PRESIDENTE) PFL PB O SR. PRESIDENTE (Efraim Moraes) Exmo. Sr. Deputado Aloysio Nunes Ferreira, Ministro-Chefe da Secretaria-Geral da Presidência da República; Exmo. Sr. Ministro Paulo da Costa Leite, Presidente do Superior Tribunal de Justiça; Exmo. Sr. Aécio Neves, Presidente da Câmara dos Deputados, Sras. e Srs. Senadores, Sras. e Srs. Deputados, estamos agora reunidos em sessão solene para celebrar um momento importante para nossas instituições. Todavia, antes de qualquer referência ao motivo que nos reúne, não há como deixar de invocar o grave momento por que passa o mundo civilizado. A palavra que posso trazer, em nome do Congresso Nacional, é de solidariedade às famílias das vítimas dos infaustos acontecimentos nos Estados Unidos no dia de hoje. Gostaria de lamentar também a escalada de violência da qual é acometida boa parte do mundo nos últimos tempos. São homens, mulheres e crianças inocentes sacrificados no altar da insensatez. Rogo a Deus que dê discernimento aos governantes para que achem o reto caminho que conduza à prevalência da civilização sobre a barbárie. Sras. e Srs. Senadores, Sras. e Srs. Deputados, hoje o Brasil escreve mais um capítulo de sua rica história política. A promulgação da Emenda à Constituição que limita a edição de medidas provisórias devolve ao Congresso sua plena soberania. A promulgação desta emenda restitui ao Poder Legislativo brasileiro prerrogativas que a prática da governança no País foi aos poucos corroendo. Os Constituintes, em sua sabedoria coletiva, não desejavam privar de energia e expediência o Poder Executivo nacional. Sabiam, à época, da necessidade de assegurar ao Chefe do Executivo um processo decisório ágil e livre de obstáculos, sobretudo, com relação a assuntos de “urgência e alta relevância” para a Nação. A medida provisória constituiu um instrumento, por excelência, para o cumprimento desse propósito. Afinal, são medidas que entram em vigor imediatamente, ficando a deliberação parlamentar sobre o aperfeiçoamento de seu conteúdo para momento posterior. A experiência brasileira com as medidas provisórias não constitui uma anomalia, quando comparada à experiência de outras democracias. Trata-se de um tipo de delegação comum a vários países, em especial aos que optaram pelo sistema presidencialista de governo. Nos Estados Unidos, por exemplo, as “ordens executivas” são proposições originárias da Presidência da República e têm caráter semelhante às nossas medidas provisórias. Lá, como aqui, também preocupam a sociedade não só pelo seu grande número de edições, mas principalmente pela ameaça que representam para a integridade do processo legislativo e do sistema representativo. Bill Clinton, por exemplo, editou em seu governo nada menos que 55 medidas por ano. Kennedy, por sua vez, editou a média de 76 a cada ano que ocupou a Casa Branca. No Brasil, o uso da medida provisória por sucessivos presidentes desde a promulgação da Constituição de 1988 revelou-se problemático. O instrumento emergencial aprovado pelos Constituintes ganhou tamanha relevância em nosso País que, de certa forma, tornou-se uma sutil ameaça ao nosso processo legiferante. Na realidade, o que foi concebido para ser provisório passou a ser permanente, com todas as conseq inerentes a tal permanência. Desde sua introdução em nosso ordenamento jurídico, o emprego excessivo das medidas provisórias só tem aumentado. O Presidente José Sarney utilizou o dispositivo 147 vezes, Collor usou-o 160 vezes, e Itamar Franco empregou-o 505 vezes. O Presidente Fernando Henrique Cardoso, até por força de reedições herdadas de governos anteriores, multiplicou o uso da medida provisória geometricamente. Em seu primeiro mandato, entre edições e reedições, a medida provisória foi usada nada menos que 2.609 vezes. Até a semana passada, seu segundo Governo já havia lançado mão desse instrumento 2.677 vezes. As reedições apresentam-se como deturpação adicional ao emprego da medida provisória para legislar no País, consagrando a perenidade daquilo que foi criado para ser estritamente provisório. A medida provisória que estabeleceu mecanismos para incentivar a privatização de bancos estaduais, por exemplo, foi reeditada 69 vezes. A que alterou o Código Florestal e as normas de cobrança do Imposto Territorial Rural chegou a ser reeditada 66 vezes. As conseq do uso excessivo de tal dispositivo podem ser observadas tanto no âmbito do Poder Judiciário quanto na esfera legislativa. Como bem enunciaram o Ministro Marco Aurélio, do Supremo Tribunal Federal, e outras autoridades do Judiciário, as medidas provisórias geram grande instabilidade normativa. Os juízes são freq surpreendidos com medidas provisórias que alteram profundamente as regras normativas nos mais variados setores da economia e da sociedade. Por sua vez, os Congressistas tinham sua pauta de trabalho abarrotado por uma avalanche de medidas provisórias que, não podendo ser apreciadas dentro do prazo de 30 dias, acabavam gerando reedições e mais reedições. Tal avalanche foi também responsável por efeito eminentemente perverso para os Parlamentares, pois esses perdiam até mesmo o direito de estabelecer agenda própria e de propor políticas alternativas, ficando a reboque do que era apresentado pelo Poder Executivo. A Emenda Constitucional que hoje promulgamos não teve por objetivo tolher o Poder Executivo de sua prerrogativa de governar. Ao contrário, o que as duas Casas deste Congresso procuraram fazer foi aperfeiçoar o instrumento da medida provisória, bem como seu papel na formulação e implementação de políticas públicas. Acaba-se a reedição indefinida das medidas. A partir de hoje, a validade da medida provisória é de sessenta dias prorrogáveis. Se a medida provisória não for apreciada em 45 dias, a matéria entrará em regime de urgência, ficando a Câmara e o Senado obrigados a apreciá-la, sob pena de ficarem proibidos de votar qualquer outro projeto. Tornamos expressas vedações que eram apenas implícitas, tais como a proibição de medida provisória sobre matéria de lei complementar, sobre matéria de lei insuscetível de delegação e sobre matéria de lei ordinária que concretize garantias fundamentais. Mais importante, talvez, seja observar que a emenda que hoje promulgamos dá ao Congresso grande parcela de responsabilidade pelas decisões públicas encerradas nas medidas provisórias. Assumimos o ônus político de votar tais medidas de imediato. Sras. e Srs. Senadores, Sras. e Srs. Deputados, esta emenda representa seis anos de tramitação entre nossas duas Casas. Pode até não ser a melhor alternativa para regulamentar dispositivo tão polêmico quanto necessário para a governabilidade do País. Entretanto, trata-se, sem dúvida, da alternativa possível no momento. Trata-se de fruto do consenso político, resultado de vasta deliberação e trabalho parlamentar. Com ela, ganham todos os Poderes da União. O Executivo continua a ter instrumentos para governar, o Judiciário passa a contar com maior estabilidade normativa e o Legislativo viabiliza para si papel positivo no processo decisório nacional. Não tenho dúvidas, pois, Srs. Senadores e Srs. Deputados, de que esta emenda constitui uma conquista de todos. Com ela, apuramos um pouco mais nosso processo legislativo e caminhamos, a passos largos, no sentido de fortalecer nossa democracia. Muito obrigado. ( Palmas. ) WELLINGTON DIAS (PRESIDENTE) PT PI O SR. PRESIDENTE (Wellington Dias) - A presente sessão solene destina-se a homenagear os 176 anos de fundação do Diário de Pernambuco . Autor: Deputado Marcos de Jesus. Convidamos para compor a Mesa o Sr. Joesil Barros, Vice-Presidente do Diário de Pernambuco e o Sr. Paulo Cabral de Araújo, Presidente dos Diários Associados e do Diário de Pernambuco . WELLINGTON DIAS (PRESIDENTE) PT PI O SR. PRESIDENTE (Wellington Dias) - Cento e setenta e seis anos de vida. Essa é a celebração que nos une em torno do Diário de Pernambuco , veículo de comunicação que muito orgulha não somente o povo daquele Estado, mas toda a Nação. Afinal, são quase dois séculos de experiência a serviço da propagação da informação de maneira independente e fidedigna. É tradição nesta Casa a celebração do aniversário daquele que é um dos mais importantes e respeitados órgãos de imprensa do País. Entre muitos títulos, detém o de mais antigo jornal do Brasil e da América Latina, além de ser a mais antiga publicação do gênero em língua portuguesa em todo o mundo. Sua notável capacidade transcendeu o âmbito regional, onde exerce liderança inconteste, para, reconhecidamente, figurar entre os mais modernos jornais brasileiros. Desde sua fundação, em 1825, tem-se mantido fiel ao ideário democrático e à perfeita sintonia entre a evolução das idéias e a modernização tecnológica. Por isso, hoje, detém as mais bem equipadas instalações gráficas da região, sem, contudo, permitir-se contaminar pela tentação do sensacionalismo ou do alinhamento a interesses oligárquicos. Sras. e Srs. Deputados, ninguém é lembrado pela posteridade sem que seu esforço em mudar a História tenha passado pelo trabalho incansável e pela persecução de um elevado ideal. A Antonino José de Miranda Falcão, ilustre figura cuja marca indelével encontra-se aposta na memória do Diário de Pernambuco por ser seu fundador, sobravam pioneirismo, ampla visão de futuro e firmeza de caráter, que se têm traduzido, ainda hoje, em eficiência e sucesso. Batizado inicialmente Diário de Anúncios , que circulava com quatro páginas, publicando simples reclames de interesse da comunidade de Recife o Município então ainda nem era a capital do Estado , o Diário de Pernambuco dedicou-se a acompanhar os fatos de repercussão nacional e internacional e, atualmente, constitui acervo inestimável no que tange à documentação, divulgação e análise da história brasileira. Sabe-se que a rotina para manter a circulação diária de um periódico envolve desde a disponibilização de recursos financeiros até a captação de pessoal qualificado, passando, evidentemente, pelo enfrentamento de intempéries políticas, sociais e econômicas. Nos tempos atuais de disseminação instantânea da informação, a multiplicidade de eventos tende a exercer grande pressão sobre a mídia. Felizmente, a ela o jornal que ora homenageamos tem respondido com o firme propósito de informar sem deformar, informar sempre e da maneira mais detalhada. No organismo social, tanto quanto no corpo humano, opera o princípio comum de que a contribuição fiel de cada órgão é indispensável para o bem-estar do todo. Sob esse enfoque, temos absoluta convicção de que o Diário de Pernambuco honra, e sempre honrará, o compromisso essencial que firmou com as liberdades de pensamento e de expressão, valores vitais para a manutenção do Estado democrático de Direito. Dessa forma, saudamos a todos que fazem o Diário de Pernambuco. MARCOS DE JESUS PL PE O SR. MARCOS DE JESUS (PL-PE. Sem revisão do orador.) Sr.~Presidente, Sras. e Srs. Deputados, Dr. Paulo Cabral, Dr. Joesil Barros, povo brasileiro, não apenas porque sou, orgulhosamente e com muita razão, pernambucano solicitei esta sessão de homenagem ao jornal Diário de Pernambuco . Solicitei-a também porque sou brasileiro, latino-americano, neste momento na condição de homem público e político, e amo as liberdades civis. Não há dúvida de que o começo para valer da liberdade dos cidadãos como direito civil e liberdade ou é um direito ou não é deu-se com o advento da descoberta da imprensa por Gutemberg, na Alemanha. No Brasil, foi justamente no Recife, a eterna Capital do norte do País, onde se começou a praticar, glória das glórias, a arte gráfica. Era o ano imaginem de 1706, em plena virada do século XVII. Tão-só para que se compare, no Rio de Janeiro tal atividade apenas veio a começar em meados daquele século, precisamente em 1747, ou seja, várias décadas após. O resultado não poderia ter sido outro. Afora a Gazeta do Rio de Janeiro surgida em 1808, pela vinda da Família Real, e semente da Imprensa Nacional , por tratar-se de imprensa oficial, e ressalvado o Correio Braziliense , de Hipólito José da Costa, por ser periódico editado em Londres, a inapelável conclusão a que se chega é a comprovação histórica de que o decano dos jornais brasileiros é o nosso homenageado e não apenas do Brasil, senão do continente latino-americano. A rigor, o jornal foi a primeira publicação do gênero em idioma português, no mundo cultura recifense a refletir-se na Europa e alhures. O Diário de Pernambuco atravessa com galhardia as três fases heróicas deste País: a inicial, de 1808 a 1880; a da consolidação, de 1881 a 1930; a moderna, de então até hoje. Senhores, a pérola da imprensa pernambucana surge em 7 de novembro de 1825, e já na introdução do seu primeiro número diz a que veio: compras, vendas, leilões, comércio, aluguéis, arrendamentos, viagens, afretamentos, serviços, roubos, perdas, achados, utilidade pública. Em resumo, uma publicação que desde o seu nascimento já procurava com esta tríade pôr-se ao lado do desenvolvimento socioeconômico, embora ainda muito incipiente, mas que certamente já se queria auto-sustentado, no Brasil. Tanto que sua autodenominação à época como Diário de Anúncios não deslustra o admirável trabalho de um Manuel Figueroa, que lhe deu seus primeiros contornos, muito menos a intuição de Antonino José de Miranda Falcão, que lhe estabeleceu os fundamentos ideológicos, a partir de três compromissos fundamentais: a democracia, a verdade, e o desenvolvimento de Pernambuco. Não há democracia com imprensa censurada, onde a mentira impera, nem justiça social em sociedades em que as idéias não se divulgam. Em Pernambuco, no início do século XIX, já se sabia disso. Portanto, não é de estranhar que o Diário de Pernambuco tenha contado, entre seus profissionais, com os sempre lembrados legendários jornalistas da história da imprensa nacional. É o caso de Aníbal Fernandes e sua luta, nos anos 30, pela reconstitucionalização do País, e do mártir pernambucano Demócrito de Souza Filho, cuja campanha contra o Estado Novo levou à tragédia de seu assassinato, em 1945. Nosso homenageado, já se pode dizer, aproxima-se dos dois séculos, o que de nenhum modo é pouco. São duzentos anos de luta. Luta pelo Recife, por Pernambuco, pelo Nordeste, pelo Brasil. Peleja por ideais libertários, batalha pela honestidade na gestão da coisa pública, pela justiça social, enfim, pelo bem-estar do nosso povo. Pertence ao rol raro das instituições que é muito fácil homenagear, simplesmente porque fazem por merecer. Instituições cujos dirigentes, jornalistas e quadro administrativo, dos mais humildes aos mais graduados trabalhadores, tiveram e têm denominador comum em sua conduta profissional de vida: honestidade e espírito de luta, pensando quase que tão-só em uma idéia fixa, que é o leitor e a comunidade a que servem. É, pois, com verdadeiro prazer que temos a honra de parabenizar este órgão da imprensa de elite, que tanto honra o Estado de que representamos, por tantos anos de profícua e contínua existência, por seu ingente trabalho em favor da sociedade a que se dedica e por tanta abnegação na defesa de seus ideais. Longa vida ao nosso jornal! O Brasil, o Nordeste, Pernambuco, o Recife, todos nós, enfim, estamos de parabéns. Sem o Diário de Pernambuco , o Brasil não seria o que é. Sr. Presidente, é com muito orgulho e com muita alegria que fazemos esta homenagem, que demorou a ser autorizada. Agradeço ao Presidente da Casa, Deputado Aécio Neves, e também aos companheiros da Mesa, que, com alegria e determinação, aprovaram a realização desta sessão solene mais do que justa. Gostaria de ler, Sr. Presidente, algumas notícias do exemplar n 1 do Diário de Pernambuco : HOJE SEGUNDA FEIRA 7 DE NOVEMBRO E 311 DIAS DO ANNO DE 1825 . Um dos anúncios diz o seguinte: Quem quizer comprar um escravo official de sapateiro, de nação Calabar, com ponta de barba e bem ladino, sem vicios nem defeito algum e que seu Senhor vende por o dito escravo não querer estar no matto para onde se mudou, falle ao sobredito Angelo Ribeiro na mesma casa das 3 até 5 horas da tarde. Sr. Presidente, quando folheio o Diário de Pernambuco , as primeiras notícias que leio é sobre o que se passou há 150 anos. Depois, leio as notícias de cem anos atrás, começo a ler o que me interessa, em primeiro lugar a página política, e outras coisas mais. Considero muito interessante esses anúncios. O anúncio n 8 diz: Marcelino de Campos Quaresma tem para vender hum escravo de nação Angola, bem feito e alto ainda sem buço, muito possante e fiel: quem o quizer comprar pode entender-se com o sobredito na rua do Cotovello, pouco adiante do becco das Barreiras ou no Cartorio da Fazenda Nacional, onde o mesmo he empregado. O anúncio n 11 é sobre roubos: Em dias do mez passado furtarão do lugar de Beberibe bairro em que morei, Sr. Presidente, por mais de 15 anos, hoje é superpopuloso, na faixa de 70 a 80 mil habitantes huma burrinha castanha com um filho da mesma cor olha que interessante, Sr. Presidente pertencentes a Bartholomeu Francisco de Souza, quem souber alguma noticia de taes animaes ou descobrir onde elles se acham dirija-se ao sobredito na sua botica na rua do Rosario, que lhe dará de premio 16 mil reis. Poderíamos continuar com a moeda réis, que foi o início de tudo. Depois, mudamos, nos diversos planos econômicos, para o Cruzado, o Cruzado Novo, o Cruzeiro Novo e hoje vemos esta esculhambação. A Bíblia diz que devemos dar graças a Deus por tudo, contudo, temos que fazer alguma coisa para melhorar essa situação. O mais interessante, Sr. Presidente, é a fidalguia, a respeitabilidade e a democracia com que o Diário de Pernambuco , nesses 176 anos, tem divulgado as notícias e prestado um relevante serviço às sociedades pernambucana e brasileira. Portanto, é muito importante para Pernambuco esta sessão solene. Por quê? Estamos homenageando o órgão de maior importância nacional, onde trabalham alguns dos melhores jornalistas do Brasil. Pernambuco é o segundo pólo médico da América do Sul, tem alguns dos melhores médicos do Brasil, além dos melhores engenheiros e advogados. Aqui faço referência, entre tantos outros, ao Dr. Artur Carvalho, advogado; ao médico Dr. Jaime Queiroz; aos jornalistas Dr. Joesil Barros, Dra. Divani e tantos outros da imprensa pernambucana. Na verdade, eles não têm medo de falar o que é preciso, ou melhor, não têm medo de escrever o que é preciso escrever, doa a quem doer. O Diário de Pernambuco não se esquiva de dar a notícia, de falar a realidade do País. Isso é muito importante, Sr. Presidente. Vou ler uma última notícia da edição n 1 do jornal Diário de Pernambuco , que, diga-se de passagem, Sr. Presidente, está completo. O anúncio n 12 diz o seguinte: No 1 do corrente na Praça Grãde desta cidade sonegarão hum menino pardo de nome Leonardo, filho de Marcelino dos Santos de Oliveira morador em terras do Monteiro cujos signaes são : ter uma cicatriz na cabeça procedida de huma queimadura, e o dedo minimo da mão direita de menos; quem o descobrir dando parte no Engenho Monteiro ou annunciando-se por este Diario terá grandes Avilçaras. Considero interessante também, Sr. Presidente, a recomendação que o jornal faz. Naquela época, quando os jornais eram entregues e as pessoas não se encontravam em casa, elas se sentiam chateadas porque queriam que o jornal lhes fosse entregue pessoalmente. Em “Avizo” está dito o seguinte: Faz-se saber aos Srs. Assignantes deste Diario que na occazião de lhe ser entregue se as suas portas se acharem feixadas o Diario será metido por baixo das mesmas, porque se torna muito incommodo procurar duas ou trez vezes a qualquer dos Srs. Assignantes para lhes entregar em mão propria dito Diario.&quot; As pessoas estavam interessadas em receber o Diário, mas muitas vezes o jornaleiro não as encontrava em casa. Sr. Presidente, mais uma vez agradeço à Presidência da Casa o carinho com que aprovou a realização desta sessão solene. Falo pelo Partido Liberal de Pernambuco e também em nome do nosso Líder, Valdemar Costa Neto. Gostaria de dizer da nossa profunda admiração pelo trabalho, pela dedicação, pela forma democrática e independente com que o Diário de Pernambuco expressa suas notícias. Sr. Presidente, que Deus abençoe a todos. Muito obrigado. (Palmas.) WELLINGTON DIAS (PRESIDENTE) PT PI O SR. PRESIDENTE (Wellington Dias) - Gostaríamos de registrar a presença dos Srs. Rosalvo de Oliveira, da CONFAMIL, Confederação Nacional dos Integrantes e Beneficiários das Forças Armadas e Forças Auxiliares; do Sr. Ari Cunha, Vice-Presidente do Correio Braziliense ; e Luiz Arrochela, que representa oficialmente o Sr. Emílio Carazzai, Presidente da Caixa Econômica Federal. VALDECI PAIVA PSL RJ O SR. VALDECI PAIVA (Bloco/PSL-RJ. Sem revisão do orador.) - Sr. Presidente, Sras. e Srs. Deputados, nobre Deputado Marcos de Jesus, autor do requerimento desta sessão solene; integrantes da Mesa; diretores do jornal Diário de Pernambuco; autoridades presentes, minhas senhoras e meus senhores, hoje homenageamos, pelo transcurso do 176 aniversário de fundação, o Diário de Pernambuco que, sem sombra de dúvida, trabalha com vários editoriais: geral, política, Brasil, economia, esportes, informática, artes, turismo, família, dentre outros. Esse leque dá bem a idéia da capacidade de abrangência e participação do Diário de Pernambuco na vida social e da extensão de seu compromisso como órgão de imprensa, fazendo circular informações e conscientizando a população. Como se vê, trata-se de uma grande empresa de comunicação totalmente voltada para o interesse do leitor, do ouvinte, do internauta ou ainda do espectador, pois, como todos sabemos, o Diário de Pernambuco se utiliza de tecnologia de ponta, proporcionando grande agilidade na confecção de notícias, contribuindo tanto para o trabalho do profissional quanto para a satisfação do consumidor. É por isso que nos sentimos tão gratificados com a realização desta sessão solene. Apesar de não ser pernambucano, por muito tempo tive o privilégio de conviver naquele Estado e sinto-me um pouco pernambucano. Com C muito orgulho não poderíamos nos furtar a comemorar esta data, confirmando o papel do jornal Diário de Pernambuco no cotidiano da vida daquele Estado. Nossos cumprimentos ao Presidente, a toda Diretoria, à equipe de jornalistas, aos repórteres, aos fotógrafos, aos diagramadores, enfim a todos que trabalham para manter o Diário de Pernambuco nos elevados patamares de qualidade de produção de notícias e responsabilidade em termos éticos e profissionais. Pedimos a Deus, a quem servimos, ao Sr. Jesus que continue abençoando o trabalho do profissionais do jornal Diário de Pernambuco . Temos grande satisfação em registrar esse discurso homenageando o jornal. Nosso muito obrigado a todos. Que Deus os abençoe! Muito obrigado. ( Palmas.) MARCOS DE JESUS (PRESIDENTE) PL PE O SR. PRESIDENTE (Marcos de Jesus) - Antes de chamar o próximo orador queremos anunciar as autoridades que enviaram telegrama e que por compromissos anteriores não puderam comparecer a esta sessão solene em homenagem ao Diário de Pernambuco : Ministro do Meio Ambiente, José Sarney Filho; Ministro da Justiça, José Gregori; Ministro da Fazenda, Pedro Malan; Ministro de Esporte e Turismo, Carlos Melles; Ministro da Agricultura, Pecuária e Abastecimento, Pratini de Moraes; Ministro do Trabalho e Emprego, Francisco Dornelles; Ministro do Desenvolvimento, Indústria e Comércio Exterior, Sérgio Silva do Amaral. Convidamos para tomar assento à Mesa o Sr. Ari Cunha, Vice-Presidente do Correio Braziliense. WELLINGTON DIAS PT PI O SR. WELLINGTON DIAS (PT-PI. Sem revisão do orador) Sr. Presidente, Deputado Marcos de Jesus, em nome de quem saúdo os demais Parlamentares presentes; Sr. Joesil Barros, Vice-Presidente do jornal Diário de Pernambuco; Sr. Paulo Cabral de Araújo, Presidente dos Diários Associados e do jornal Diário de Pernambuco , demais autoridades presentes, estava inscrito pela bancada do Partido dos Trabalhadores o Deputado pernambucano Fernando Ferro. Infelizmente, S.Exa. não conseguiu chegar a Brasília. Portanto, incumbiu-me da missão de fazer essa saudação pela bancada do Partido dos Trabalhadores. Devo falar da alegria, como brasileiro e nordestino, de participar desta sessão solene em homenagem a um importante jornal. Sabemos que neste País não é fácil trabalhar com liberdade, com independência, especialmente numa área complexa como a das comunicações. Somos ainda um País que sequer conta com um conselho nacional de comunicações. Portanto, há dificuldade na manutenção dos jornais, que são vozes ativas da verdade neste País. Hoje homenageamos o jornal Diário de Pernambuco , aqueles que o dirigem e, com carinho especial, aqueles que fazem seu jornal no dia-a-dia, desde jornalistas competentes que muito orgulham o Brasil, como jornaleiros que, de rua em rua, e não mais de casa em casa, entregam diariamente os jornais, não só na cidade do Recife, mas por todo o País. Levam notícias do Brasil e do mundo, com a confiabilidade de um jornal que tem na sua história, como foi registrado anteriormente, o privilégio de ser o primeiro jornal em língua portuguesa, portanto, um marco simbólico e que nos posiciona em um grau de importância em relação ao mundo. Faço esta saudação a toda a equipe, a todos aqueles que construíram, que fizeram sua parte e a todos aqueles que continuam no batente. Sou da área de comunicação e sei da importância do trabalho e da responsabilidade que temos para com a vida democrática de um País como o Brasil. Seguramente, é com a democratização dos vários pensamentos que chegam às mais diferentes camadas sociais que construímos a democracia. Não temos dúvida do importante papel do Diário de Pernambuco na democracia brasileira, especialmente em uma região que, com certeza, caminha a passos largos na busca de contribuir também com espaços democráticos. E Pernambuco é um dos Estados brasileiros que marcou, em muitos momentos importantes, a História do Brasil, registrada nos canais de comunicação do Diário de Pernambuco . Ao fazer esta saudação pedimos que Deus abençoe toda a equipe, o povo de Pernambuco e que possamos contar sempre com a forma corajosa e competente com que operam o Diário de Pernambuco . Em nome da bancada do Partido dos Trabalhadores rendemos nossas homenagens, deixando registrado o desejo de que possamos ter por mais e mais séculos a presença do Diário de Pernambuco . Muito obrigado. ( Palmas. ) MARCOS DE JESUS (PRESIDENTE) PL PE O SR. PRESIDENTE (Marcos de Jesus) Antes de chamar o próximo orador, registro a mensagem do Sr. Bispo Emerson Oliveira, da Igreja Universal do Reino de Deus, em Pernambuco, que cumprimenta o Diário de Pernambuco pelos relevantes serviços prestados à sociedade pernambucana brasileira. SALATIEL CARVALHO PMDB PE O SR. SALATIEL CARVALHO (PMDB-PE. Sem revisão do orador.) Sr.~Presidente, Sras. e Srs. Deputados, caros amigos, Dr. Joesil Barros, Dr. Paulo Cabral, representantes do Diários Associados, do Diário de Pernambuco , ilustres jornalistas, demais convidados, reúne-se a Câmara dos Deputados, em sessão solene, para homenagear com todas as honras o Diário de Pernambuco , que, sem dúvida, é um verdadeiro patrimônio da imprensa nacional, pelo seu 176 aniversário de fundação. Apresentando títulos ímpares, como o de mais antigo periódico do Brasil e da América Latina e mais antiga publicação do gênero em língua portuguesa, em todo o mundo, o Diário de Pernambuco deverá sempre ser objeto da mais entusiástica homenagem, por tudo o que significa como parâmetro de dignidade e ética profissional para a imprensa brasileira. Além disso, ao longo desses 176 anos de existência, manteve-se absolutamente afinado com os interesses e a realidade do Nordeste, de cujo povo se vem fazendo autêntico porta-voz. É um longo percurso de participação na história nacional, onde se acumulam episódios de luta em favor da democracia e da liberdade de expressão. Nos diversos momentos em que os valores consagrados pela República ou a primazia da Constituição se viram ameaçados, o Diário de Pernambuco , longe de se deixar intimidar ou cooptar, manteve incondicional independência na produção da notícia, visando informar e esclarecer a opinião pública, em favor da consciência crítica nacional. Fundado em 7 de novembro de 1825, o jornal compilou a maior coleção brasileira de notícias nacionais e internacionais. Acompanhando e participando dos mais importantes acontecimentos nesses últimos dois séculos, mobilizou o talento, a dedicação e a criatividade de sucessivas gerações. Nas diferentes administrações, consolidou uma tradição de exclusivo compromisso com os interesses do leitor, o que lhe vem garantindo, em patamares incomparáveis em termos de Nordeste, índices extraordinários de credibilidade e penetração. Alguns fatos merecem lembrança. Recém-incorporado aos Diários Associados de Assis Chateaubriand, o jornal atuou de forma excepcional no movimento pelo predomínio da Constituição na crise de 1930. No contexto, ressalta a figura de Aníbal Fernandes, à frente do jornal por mais de 40 anos, mantendo intransigentemente sua posição em favor da liberdade e da democracia. Os mesmos valores pautaram a conduta jornalística quando participou do movimento contra o flagelo nazi-fascista, à época da Segunda Guerra Mundial. Como poucos periódicos brasileiros, aliás, manteve-se corajosamente em oposição ao Estado Novo, combatendo todas as arbitrariedades praticadas pelo Governo Vargas. A história não esquece, também, como foi objeto de violenta represália, mediante o covarde assassinato do jornalista Demócrito de Souza Filho, exatamente quando este discursava contra o regime, da sacada do Diário de Pernambuco , para a população então mobilizada. Foi o compromisso, portanto, com a informação livre e confiável que sempre marcou a linha editorial do jornal. Zeloso de seu papel na história, consciente de sua responsabilidade em relação ao leitor, o Diário de Pernambuco construiu uma reputação incomparável na imprensa brasileira, por meio da qual atesta jamais ter sucumbido ao poder econômico, às facilidades do noticiário sensacionalista, às benesses do jogo político. Por essas razões atinge hoje o Diário de Pernambuco um público sempre crescente, que confia na qualidade da informação recebida, mantida por uma linha editorial livre e absolutamente coerente. É interessante observar ainda, Sr. Presidente, como, apesar de distante do eixo Rio São Paulo, apesar de geograficamente afastado do centro do poder, o Diário de Pernambuco tem sabido equilibrar sua atenção entre a cena nacional e a demanda regional. Ao mesmo tempo em que valoriza e estimula a inteligência da terra, abre espaço para profunda discussão de todas as questões de repercussão nacional. Dito de outro modo, faz inserir a voz do Nordeste no cenário brasileiro, com responsabilidade em relação ao projeto de integração e desenvolvimento regional. É assim que permanece identificado com o que há de mais respeitável e atualizado na imprensa nacional, ao mesmo tempo em que se mantém afinado com os interesses, as mazelas e as ambições do povo do Nordeste. Dispondo hoje do mais bem equipado parque gráfico da região, com uma tiragem que cresce anualmente, o Diário de Pernambuco consagrou-se como um paradigma da imprensa no Brasil, contribuindo hoje com o melhor padrão tecnológico, com os valores atemporais da democracia, da liberdade e do acesso à informação. Aproveitamos a oportunidade para cumprimentar todos os dirigentes, repórteres e demais funcionários pela forma como se têm mantidos ciosos de seu papel na vida da Nação; nossos cumprimentos também ao público leitor, que correspondeu, com confiança e fidelidade, aos ideais de jornalismo preconizados pelo Diário de Pernambuco . Só podemos esperar que, no século XXI, prossiga o Diário de Pernambuco em sua grande tarefa de informar com ética e responsabilidade, construindo a consciência crítica a respeito dos grandes fatos regionais e nacionais. Minhas homenagens sinceras a esse grande jornal que é o Diário de Pernambuco . Muito obrigado, Sr. Presidente. VALDECI PAIVA PSL RJ O SR. VALDECI PAIVA (Bloco/PSL-RJ. Pela ordem. Sem revisão do orador.)~ Sr. Presidente, Sras. e Srs. Deputados, quero anunciar em primeira mão, aproveitando que a imprensa está presente, o que está acontecendo nos Estados Unidos da América. Trata-se de lamentável episódio que acabou de ocorrer em Nova Iorque. Dois aviões colidiram com as duas torres do Edifício World Trade Center. Tudo indica, conforme os noticiários, que pode ter havido um atentado terrorista. As cenas televisadas mostram o momento em que o segundo avião colidiu propositalmente com a torre. Televisões do mundo inteiro estão mostrando as imagens. Segundo informações que tivemos agora, outros edifícios também foram atingidos, como o Pentágono. Era o que tinha a dizer. EDUARDO CAMPOS PSB PE O SR. EDUARDO CAMPOS (Bloco/PSB-PE. Sem revisão do orador.) Sr.~Presidente, Deputado Marcos de Jesus; Sr. Paulo Cabral de Araújo, Presidente dos Diários Associados; Sr. Joesil Barros, Vice-Presidente do Diário de Pernambuco ; jornalista Ari Cunha, Vice-Presidente do Correio Braziliense ; Sras. e Srs. Deputados, meus senhores e minhas senhoras, havia redigido um pronunciamento, mas prefiro abandoná-lo para não ficar no formalismo do que já foi escrito há cerca de alguns dias. Falarei, em rápidas palavras, sobre a satisfação que tenho de me pronunciar em nome do meu partido, como pernambucano, em uma sessão de homenagem àquele que foi o primeiro jornal em língua portuguesa em circulação no mundo. A Língua Portuguesa anda muito agredida. Sensibiliza os que fazem os jornais, os que fazem a cultura no País, a necessidade de reagir para preservar a identidade da língua. O jornal Diário de Pernambuco foi, sem sombra de dúvidas, o primeiro veículo em que a Língua Portuguesa pôde se expressar e ficar. Trata-se do jornal mais antigo em circulação na América Latina, que colecionou títulos importantes, passagens das mais destacadas na luta pela liberdade de imprensa. Há pouco, o Deputado Salatiel Carvalho falou do jornalista Aníbal Fernandes. Qualquer pernambucano tem orgulho de tê-lo como conterrâneo, um jornalista que foi deposto, que pagou com o cerceamento da sua própria liberdade, pois foi para a cadeia, pela coragem e determinação de fazer críticas ao regime autoritário de então. Na década de 30, o Diário de Pernambuco foi adquirido pelo eminente jornalista Assis Chateaubriand, figura polêmica que marcou a história do jornalismo brasileiro. Ele construiu uma grande rede de comunicação em um momento de mudança efetiva por que passava o País. Construiu importantes instrumentos de informação para a população. O Diário de Pernambuco sempre foi um espaço para o debate em um Estado muito complexo, de formação política e cultural distinta de outros tantos, marcado pelas diferenças, pela polarização política, que advinha de sua formação econômica, tão bem traduzida pelo mestre Giberto Freyre, que nas páginas desse jornal escreveu grandes passagens da sua vida como cronista, além de sociólogo que foi. Também foi um Estado marcado pela casa grande e pela senzala, que reproduzia no campo da política e da cultura essa polaridade. Sobreviver em um ambiente como esse, com o equilíbrio de uma imprensa livre, não é desafio fácil, é extremamente difícil. O Diário de Pernambuco escreveu, nas suas páginas, o equilíbrio, lançou um espaço para que se apresentasse o contraditório. Mais recentemente, o Diário de Pernambuco vive o processo de modernização. Sai da caneta esferográfica, da máquina de escrever, para se tornar um dos veículos mais modernos. Como pernambucano, marco homenagens ao Sr. Joesil Barros, ao Dr. Paulo Cabral, ao Sr. Gladstone Vieira Belo e a tantos outros pernambucanos que souberam fazer essa travessia em tempos de grande dificuldades econômica e financeira. A informação é on line , interligada com o mundo, e eles souberam fazer essa transição. Hoje, é fácil contarmos a história. Mas dou o testemunho de que não deve ter sido fácil. Presto homenagens a esses bravos lutadores da comunicação, que souberam fazer essa trajetória tão difícil do Diário de Pernambuco e hoje se tornar uma referência, um diário viável, importante para o equilíbrio econômico e financeiro dos Diários Associados, pois tem segurado, pelo que se sabe, outros veículos vivos que informa outras comunidades, dada a coragem e o espírito empreendedor desses brasileiros. Feitas as homenagens, agora vêm os desafios. Nós vivemos em um País que atravessa momento extremamente difícil. Cerca de 50 milhões de brasileiros estão jogados na miséria. O Nordeste brasileiro, especificamente, está sendo o ambiente que abriga a maioria desses miseráveis e enfrenta desafios muito fortes, com um clima de violência jamais visto nas ruas. A economia de base local do Nordeste, propriamente a canavieira, que o Diário de Pernambuco conhece de perto, está em situação de decadência. Portanto, são muitos os desafios para a Nação. A um jornal como o Diário de Pernambuco não basta informar o fato do cotidiano. Mais do que isso, ele tem o desafio de ser prospectivo em relação ao futuro, de animar a nossa população. Dou o testemunho de que ele tem feito isso. Fez, por exemplo, uma campanha de matérias do Nordeste, de Pernambuco, que deu certo. Não só mostrou as dificuldades, mas animou a população, basicamente, no que tem causado hesitação. O Diário de Pernambuco tem feito um trabalho muito importante na conscientização pela paz e no combate à violência, com a campanha da paz, para a qual o jornal tem convocado a juventude, as entidades religiosas e sindicais e a sociedade civil. Mas como nordestino, Dr. Paulo Cabral, no momento em que se extingue a SUDENE e em que temos desafios dessa ordem, é importante que o Diário de Pernambuco seja um instrumento a buscar novo debate sobre a realidade nordestina em função do atual cenário nacional. O modelo econômico imposto à América Latina vem dando provas de falência e de que seus paradigmas não funcionam. A Argentina é uma prova disso. Mas estamos nos aproximando de um pleito muito importante para o País, que definirá as novas regras da condução econômica e social. É importante que o Diário de Pernambuco realize um debate sobre o papel das elites nordestinas políticas nos últimos vinte anos. Essas elites, no meu entender, fracassaram, indistintamente. Amiudou-se muito o debate sobre a economia no Nordeste. Os Estados entraram na guerra fiscal, ficaram nas lutas provincianas, assim perdeu-se a luta estratégica do papel do Nordeste no desenvolvimento nacional. A SUDENE foi prova disso, apesar de ter sido uma conquista também dos Diários Associados e do Diário de Pernambuco , que apoiou aquela luta. Estávamos precisando de um jornal com o prestígio, o conceito e a largueza do Diário de Pernambuco , para que fomentasse um debate regional largo, suprapartidário, com o contraditório sobre os caminhos, ressaltando a necessidade de uma política que integre a região nordestina, não com migalhas ou protecionismos, mas, sobretudo, com a visão do desenvolvimento regional integrado ao desenvolvimento nacional. Esse é um desafio, uma provocação no bom sentido, que gostaria de trazer neste momento de homenagens que o Partido Socialista Brasileiro compartilha com os demais partidos, felicitando a iniciativa do Deputado Marcos de Jesus para esta justa e merecida homenagem. Sugiro, ainda, nesta oportunidade, que este debate seja inserido nas páginas do Diário de Pernambuco , que, com certeza, ganharia audiência nacional e o prestígio do eleitor. Aos que fazem o Diário de Pernambuco nossas sinceras homenagens e a certeza de que ele continuará a fazer notícia e história por séculos a mais. Muito obrigado. (Palmas.) MARCOS DE JESUS (PRESIDENTE) PL PE O SR. PRESIDENTE (Marcos de Jesus) Agradecemos à Presidência da Casa, na pessoa do Deputado Aécio Neves, a oportunidade para a realização desta sessão solene. Parabenizamos o Dr. Joesil Barros, Vice-Presidente do Diário de Pernambuco , pelo grande trabalho desempenhado; o Dr. Ari Cunha, Vice-Presidente do Correio Braziliense ; e, especialmente, o Dr. Paulo Cabral de Araújo, Presidente dos Diários Associados e do Diário de Pernambuco . Agradecemos com especial carinho a todos que estiveram presentes nesta sessão solene. 5.3.3.1 Atividade prática Utilizando o código acima, obtenha as falas proferidas do dia da autorização do processo de impeachement da Presidenta Dilma Vana Rousseff na Câmara dos Deputados, ocorrido em 17 de abril de 2016. Salve os dados em formato .rda. 5.4 Download de arquivos da web Além do conteúdo diretamente publicado numa página web, pode ser de interesse fazer o download de arquivos disponíveis. Em especial, no caso brasileiro, muitos órgãos públicos publicam relatórios em formato .pdf. O obstáculo proporcionado pelo formato do arquivo e o modo como o conteúdo é disponibilizado pode ser superado com o uso da linguagem R. Como exemplo, vamos conferir o caso do Tribunal de Contas do Estado de Pernambuco, que anualmente disponibiliza relatórios de gestão. TCE-PE Para atingir nosso objetivo, vamos utilizar as Etapas anteriormente apresentadas: Etapa 1: Conhecer detalhadamente o caminho para acesso aos dados: A página do TCE-PE apresenta os relatórios publicados anualmente. library(rvest) library(XML) library(xml2) link_tce &lt;- &quot;https://www.tce.pe.gov.br/internet/index.php/relatorios-de-gestao-fiscal-2&quot; Etapa 2: Armazenar todos os caminhos de acesso aos dados de forma amigável ao programa: Aqui selecionamos exatamente os endereços de download de cada um dos arquivos publicados. Todos os .pdf são um link dentro do código fonte da página, iremos, portanto, obter os links desses relatórios. Para tanto, podemos observar que o código fonte possui um padrão que identifica os Relatórios de Desempenho anual: rdg. Iremos utilizá-lo para obter somente os documentos que possuam esse padrão. link_relatorios &lt;- link_tce %&gt;% read_html %&gt;% # função que irá ler o código fonte escrito em html html_nodes(&quot;a&quot;) %&gt;% # nó presente no código fonte antes do pdf html_attr(&quot;href&quot;) # atributro do nó # obtenção dos links do relatório através do padrão `rgd` link_relatorios &lt;- link_relatorios[grep(&quot;rdg&quot;, link_relatorios)] Etapa 3: Obter os dados: A obtenção dos dados se refere justamente ao download do material para armazenamento local. Logo, definimos o diretório onde os arquivos serão salvos e fazemos uso da função download.file. Como obtivemos mais de um link, para mais de um relatório, no código abaixo apresentamos como obter o primeiro arquivo .pdf presente em link_relatorios[1]. download.file(link_relatorios[1], destfile = &quot;seu_diretorio/nome_do_arquivo.pdf&quot;, mode = &quot;wb&quot;) Etapa 4: Processar os dados obtidos: O processo é similar à leitura de conteúdo em arquivo .pdf explicada na seção ??. # pacotes library(textreadr) library(here) # # lendo arquivo .pdf rdg2018 &lt;- read_document(&quot;nome_arquivo.pdf&quot;) # salvando como .txt writeLines(rdg2018, &quot;meu_arquivo.txt&quot;) 5.5 Twitter Twitter Existem diversos pacotes que possibilitam a captura de informação do Twitter, sendo possível obter tweets ou timelines somente de usuários públicos, ou seja que não possuem um perfil privado. Como exemplo, vamos utilizar o pacote rtweet para obter dados dos tweets da timeline da Deputada Federal Tabata Amaral. Vale ressaltar que o Twitter exige que para obtenção dos dados você possua uma conta no Twitter e autorize o app rstats2twitter no popup que surgirá no seu browser ao utilizar alguma das funções no console do R, isso ocorrerá somente na primeira vez de uso, criando um token que será salvo para próximas sessões. library(rtweet) tabata_timeline &lt;- get_timeline( user = &quot;tabataamaralsp&quot;, n = 30) Além do uso de obtenção de hashtags é possível buscar termos que estão sendo tweetados ou hashtags através do search_tweets que segue lógica similar ao get_timeline. 5.6 Imagens No caso de textos em imagem é possível utilizar o optical character recognition (OCR). OCR é o processo de encontrar e reconhecer texto dentro de imagens, por exemplo, de uma captura de tela, texto digitalizado, etc. A imagem abaixo tem um texto de exemplo: ocr Com o pacote Tesseract e o uso da Interface de Programação de Aplicativos (API) do Google é possível capturar seu conteúdo, podendo ser uma imagem presente no seu computador ou da web. Para realizá-lo em português é necessário instalar o acervo de treinamento em português com o seguinte comando tesseract_download('por'). No caso, vamos utilizar a imagem do Tweet Fake atribuído ao Presidente Bolsonaro para obter seu conteúdo: FAKE NEWS! library(tesseract) # obtendo treinamento na ligua portuguesa tesseract_download(&#39;por&#39;) por &lt;- tesseract(&quot;por&quot;) # alocando treinamento na ligua portuguesa # obtendo texto da imagem text &lt;- tesseract::ocr(&quot;https://raw.githubusercontent.com/davi-moreira/txt4cs/master/data/tweet_bolsonaro_cp.png&quot;, engine = por) # resultado cat(text) Segue o resultado: ## Jair M. Bolsonaro &amp; 8 a Qjairbolsonaro Vie . S O que é ciência política? 09:26 - 06/03/2019 - Twitter for iPhone 5.7 Áudio Transcrição Nos últimos anos, diversas aplicações comerciais passaram a ofertar a possibilidade de transcrição de áudios e vídeos. Acompanhando esse processo, iniciativas foram implementadas na liguagem R, dentre elas o pacote googleLanguageR, da Google e o pacote aws.transcribe, da Amazon. De forma geral, esses pacotes utilizam APIs dessas grandes companhias de tecnologia com alguma limitação para uso gratuito, sendo necessário cadastro em sua plataforma e credenciamento de cartão de crédito. Para se ter um exemplo, vamos explorar o uso do pacote googleLanguageR. install.packages(&quot;googleLanguageR&quot;) Para obter uma chave de API que vai possibilitar o uso do pacote você precisa criar um conta no Google cloud e habilitá-la com o seu cartão de crédito. Vale ressaltar que é uma assinatura gratuita, mas caso ultrapasse o limite da cota gratuita você será cobrado. Após criar sua conta há uma diversidade de APIs que podem ser ativadas. O pacote googleLanguageR foi pensando para três funcionalidades principais: Transcrição de áudio para texto: Google Cloud Speech API Tradução de texto: Google Cloud Translation API Processamento de linguagem natural permitindo a identificação de sentimento, estrutura e significado: Google Natural Language API Nosso foco aqui é na transcrição de áudio para texto8. Para usar a API você precisa estar logado na sua conta, entrar no console, acessar a página do Google Cloud Speech API e habilitá-la. Com a API já habilitada, é necessário criar uma credencial do serviço. Para isso, na página da API do Google Speech já habilitada vá na opção “credenciais”. em seguida em “criar credenciais”. Após concluída essa etapa, é necessário criar uma “chave de conta de serviço” e baixar o arquivo JSON. O arquivo JSON contém a chave que permite o uso da aplicação. Para prosseguir é necessário carregá-lo com a função gl_auth, conforme abaixo: library(googleLanguageR) gl_auth(&quot;arquivo.json&quot;) No nosso exemplo, vamos utilizar o áudio da propaganda de campanha do então candidato a Deputado Federal pelo PR, o candidato Tiririca. Tiririca - 2222 Your browser does not support the audio tag; for browser support, please see: https://www.w3schools.com/tags/tag_audio.asp Antes do uso da função para transcrição, recomenda-se realizar a etapa abaixo para unir os canais do som em um formato mono através do pacote tuneR e salvar a leitura do áudio em formato .csv. library(tuneR) # Baixe o som: audio &lt;- &quot;https://raw.githubusercontent.com/davi-moreira/txt4cs/master/data/tiririca_campanha.wav&quot; #Leitura do som: audio_load &lt;- readWave(&quot;audio&quot;) audio_load &lt;- mono(audio_load, which = c(&quot;left&quot;, &quot;right&quot;, &quot;both&quot;)) writeWave(audio_load, &quot;tiririca_campanha.csv&quot;, extensible = F) Em seguida, selecione o arquivo que deseja transcrever. Lembre-se que a cota gratuita é de 60 minutos por mês e o formato de áudio padrão é wav. A transcrição do áudio é realizada com a função gl_speech, identificando o código da língua e a frequência em Hertz9. audio_load &lt;- &quot;https://raw.githubusercontent.com/davi-moreira/txt4cs/master/data/tiririca_campanha.csv&quot; transcricao &lt;- gl_speech(audio_load, sampleRateHertz = 44100L, languageCode = &quot;pt-BR&quot;) O função gl_speech retorna uma lista com dois elementos: transcript e timings. O primeiro com a transcrição e o segunda mostrando as palavras por segundo em seu início e fim. Abaixo vemos o resultado da transcrição: transcricao$transcript$transcript ## [1] &quot;Adivinha quem está falando do vídeo você já te enviar Joel o Tiririca candidato a deputado federal Não esquece peguei vocês enganei vocês vocês pessoal fosse outra pessoa sou eu agastado 2222&quot; Conteúdo publicado pela Câmara dos Deputados sem revisão do autor.↩ Conteúdo publicado pela Câmara dos Deputados sem revisão do autor.↩ Para uma referência de como transformar objetos xml em data.frame ver: i) (https://stackoverflow.com/questions/17198658/how-to-parse-xml-to-r-data-frame); ii) (https://stackoverflow.com/questions/13579996/how-to-create-an-r-data-frame-from-a-xml-file)↩ Para mais informações sobre as possibilidades do pacote veja essa vinheta de introdução↩ Para mais detalhes consulte a vinheta Google Could Speech API↩ "],
["processamento.html", "Capítulo 6 Processamento dos dados 6.1 Os pacotes 6.2 Tokens 6.3 Corpus 6.4 Tokens e Corpus 6.5 Stemming 6.6 DFM: Matriz de documentos e termos 6.7 FCM: Matriz de co-ocorrência de termos", " Capítulo 6 Processamento dos dados Davi Moreira, Mônica Rocabado A análise de conteúdo só é possível através da transformação do texto bruto em estruturas de dados convenientes para análise. Esta etapa é fundamental e deve ser feita com cuidado para evitar erros futuros. Temos basicamente três estruturas num texto: Tokens: O texto pode ser armazenado em n-grams ou cadeias de caracteres (strings), por exemplo a frase “projeto de lei”, em n-gram de tamanho 1, ou seja unigram, se torna “projeto” “de” “lei”. Corpus: Esses tipos de objetos geralmente contêm strings brutas com metadados sobre os documentos. Também pode ser descrito como uma coleção de documentos. Matriz de documentos e termos (DFM ou DTM): é uma matriz esparsa que descreve uma coleção (ou seja, um corpus) de documentos com uma linha para cada documento e uma coluna para cada termo. Em geral, as células de uma DTM são preenchidas pela frequência de palavras. A análise do conteúdo do texto como dado exige versatilidade na transformação entre estruturas. Os pacotes que veremos permitem essa versatilidade. 6.1 Os pacotes Para este capítulo utilizaremos o pacote tidytext e quanteda, ambos estruturais para análise de conteúdo. Inicialmente trabalharemos com o pacote tidytext, devido sua convergência com o pacote tidyverse. Em seguida, utilizaremos o pacote quanteda, que possui mais funcionalidades de análise. 6.2 Tokens 6.2.1 O formato tidy text (texto arrumado)10 Usar os princípios do tidy text é uma maneira poderosa de tornar o processamento de dados mais ágil e eficaz. Conforme Wickham (2014), os dados organizados têm uma estrutura específica: Cada variável é uma coluna Cada observação é uma linha Cada tipo de unidade de observação é uma tabela Assim, o formato de “texto arrumado” segue a mesma estrutura apresentada, na qual cada linha/observação possui uma unidade de texto significativa, também chamado por token, estes organizados em uma coluna/variável. Reforçando, o token então é uma unidade de texto significativa, podendo ser uma única palavra, um conjunto de palavras, uma frase ou um parágrafo. Para obte-lo se deve realizar o processo de tokenização, em que se divide o texto em tokens, como veremos asseguir. 6.2.2 Função unnest_tokens Vejamos um trecho de “Canção do Exílio”, poesia romântica de Gonçalves Dias escrita em 1843. No caso, estamos criando um vetor. text &lt;- c(&quot;Minha terra tem palmeiras&quot;, &quot;Onde canta o Sabiá&quot;, &quot;As aves, que aqui, gorjeiam&quot;, &quot;Não gorjeiam como lá&quot;) knitr::kable(text) Para transformar o vetor de strings em formato tidy text dataset, precisamos, primeiro, criar um data.frame`, através da função tibble. Na função abaixo estamos declarando o nome das colunas e o valor contido nelas, por exemplo “line” indica o id ou número da linha, e “text” é a coluna que contém cada observação do vetor “text” que criamos anteriormente. # carregando pacotes ---- library(dplyr) text_df &lt;- tibble(line = 1:4, text = text) knitr::kable(text_df) Um objeto tibble é uma classe moderna de data.frames dentro do R, disponível nos pacotes dplyr e tibble, que possui um método de impressão conveniente, não converte strings em fatores e não usa nomes de linhas. Tibbles são ótimos para uso com funções, pacotes e ferramentas tidy. Contudo, nosso objeto tibble ainda não está coerente com a definição de tidy text que apresentamos. Para tanto, temos que converter nosso objeto em outro que atenda a condição one-token-per-document-per-row, logo cada token unigram, ou seja palavra, é um valor indicado por linha. A função unnest_tokens presente no pacote realiza este processo de tokenização. Abaixo estamos criando a coluna “word”, que irá conter uma palavra por linha através da coluna “text” que contém nosso texto. # carregando pacotes ---- library(tidytext) text_token &lt;- text_df %&gt;% unnest_tokens(word, text) knitr::kable(text_token) 6.2.3 Tidying a aprovação do impeachment da Presidenta Dilma Rousseff Vamos utilizar como exemplo os discursos proferidos pelos parlamentares da Câmara dos Deputados na sessão de Impeachment da Presidenta Dilma Rousseff em Abril de 2016. Cada linha contém um discurso por parlamentar, podendo haver mais de um discurso por deputado. Para obter estes dados você precisa utilizar o pacote txt4cs que acompanha o livro. # carregando pacotes ---- library(dplyr) library(stringr) library(tidytext) library(ggplot2) library(forcats) devtools::install_github(&quot;davi-moreira/txt4cs-pkg&quot;) library(txt4cs) impeachment_dilma &lt;- txt4cs::impeachment_dilma Agora iremos tokenizar os discursos dentro do formato Tidy, permitido ainda a associação do token com demais dados correspondentes, no caso o nome do deputado e o partido que participa. A função unnest_tokens, como já colocado, permite a tokenização, no entanto deve-se indicar dois argumento principais para seu funcionamento: o nome da coluna que será criada, esta posta abaixo como word e indicar qual coluna se deseja realizar a tokenização, no caso text. O padrão da função é a divisão do texto por uma palavra, ou unigram, sendo possível sua alteração caso se queira um tamanho maior de n-grams. tidy_impeachment &lt;- impeachment_dilma %&gt;% unnest_tokens(word, text) head(tidy_impeachment[,5], 30) Como é possível notar, há uma diversidade de conectores e termos que não agregram valor a nossa análise, estes são chamados de stopwords, que serão removidos da base. Percebe-se também que no texto o nome do partido aparece sempre seguido do nome do deputado, dessa forma também será filtrado da análise. Para remover essas palavras vamos utilizar a função anti_join, que irá remover os objetos que criamos que contém as stopwords e o nome dos partidos dos nossos tokens. #stopwords library(quanteda) stop_w &lt;- tibble(word = stopwords(source = &quot;stopwords-iso&quot;, language = &quot;pt&quot;)) stop_w &lt;- stop_w %&gt;% add_row(word = c(&quot;sr&quot;, &quot;25&quot;, &quot;voto&quot;, &quot;presidente&quot;, &quot;votos&quot;, &quot;total&quot;, &quot;deputado&quot;)) #remover o nome do partido partido &lt;- impeachment_dilma$partido %&gt;% tibble() %&gt;% distinct() %&gt;% rename(&quot;word&quot; = &quot;.&quot;) %&gt;% mutate(word = str_to_lower(word)) #retirar do corpus as stopwords tidy_impeachment &lt;- tidy_impeachment %&gt;% anti_join(stop_w) %&gt;% anti_join(partido) head(tidy_impeachment[,5], 30) Com a informação já no formato tidy já é possível iniciar algumas análises com os dados, como a frequência de palavras: tidy_impeachment %&gt;% count(word, sort = TRUE) Também pode-se visualizar as frequências geradas tidy_impeachment %&gt;% count(word, sort = TRUE) %&gt;% mutate(word = fct_reorder(word, n)) %&gt;% filter(n &gt; 160) %&gt;% ggplot(aes(word, n)) + geom_col() + coord_flip() + labs(x=&quot;&quot;) Com o dado em formato Tidy, é possível comparar as palavras mais utilizadas por partido: tidy_impeachment %&gt;% count(word, partido, sort = TRUE) %&gt;% filter(n &gt; 55) %&gt;% mutate(word = fct_reorder(word, n)) %&gt;% ggplot(aes(fill = partido, x = word, y= n)) + geom_col() + coord_flip() + labs(x=&quot;&quot;) + scale_fill_brewer() Avançando um pouco mais, já seria possível comparar o uso de palavras por diferentes deputados. Vamos comparar os deputados do PT, PSOL e do PSDB. Dessa forma, como o exemplo acima indica, já possuímos os dados em formato tidy, vamos selecionar os termos por partido. impeachment_pt &lt;- impeachment_dilma %&gt;% filter(partido == &quot;PT&quot;) impeachment_psdb &lt;- impeachment_dilma %&gt;% filter(partido == &quot;PSDB&quot;) impeachment_psol &lt;- impeachment_dilma %&gt;% filter(partido == &quot;PSOL&quot;) Com os dados filtrados, vamos transforma-los em um dataframe impeachment_pt &lt;- tibble(line = 1:nrow(impeachment_pt), text = impeachment_pt$text) impeachment_psdb &lt;- tibble(line = 1:nrow(impeachment_psdb), text = impeachment_psdb$text) impeachment_psol &lt;- tibble(line = 1:nrow(impeachment_psol), text = impeachment_psol$text) Após esse processo de seleção do dado de texto por partido, vamos tokenizar a informação através da função unnest_tokens, do pacote tidyverse e retirar as stopwords por meio da função anti_join do pacote dplyr. #Tokenizando tidy_impeachment_pt &lt;- impeachment_pt %&gt;% unnest_tokens(word, text) %&gt;% anti_join(stop_w) tidy_impeachment_psdb &lt;- impeachment_psdb %&gt;% unnest_tokens(word, text) %&gt;% anti_join(stop_w) tidy_impeachment_psol &lt;- impeachment_psol %&gt;% unnest_tokens(word, text) %&gt;% anti_join(stop_w) Para termos um gráfico que compare a proporção de palavras utilizadas pelo PSOL e PSDB em relação ao PT, temos que: Unir as bases tratadas em uma única Medir a frequência dos termos utilizados por autor Criar uma coluna com os tokens Criar uma coluna com a frequência utilizada pelo PT Criar uma coluna outra contendo a frequência de uso dos termos pelo PSDB e PSOL Criar uma coluna que identifique o partido, entre PSDB e PSOL. # frequencia de palavras library(tidyr) frequency &lt;- bind_rows(mutate(tidy_impeachment_psol, author = &quot;PSOL&quot;), mutate(tidy_impeachment_psdb, author = &quot;PSDB&quot;), mutate(tidy_impeachment_pt, author = &quot;PT&quot;)) %&gt;% mutate(word = str_extract(word, &quot;[a-z&#39;]+&quot;)) %&gt;% count(author, word) %&gt;% group_by(author) %&gt;% mutate(proportion = n / sum(n)) %&gt;% select(-n) %&gt;% spread(author, proportion) %&gt;% gather(author, proportion, `PSOL`:`PSDB`) knitr::kable(head(frequency,5)) Vamos produzir um gráfico que demonstre os termos mais relativamente utilizados pelo PT, PSDB e PSOL no contexto do discurso do impeachment. Para conseguirmos realizar o comparativo dos três partidos, vamos colocar os valores de PT como eixo X e facet pelos autores PSDB e PSOL. Dessa forma, no gráfico, quanto mais próximo um termo do eixo y, mais ele foi relativamente utilizado pelo PSDB ou PSOL e quanto mais próximo ao eixo x, mais ele foi utilizado por um deputado do PT. # gráfico ggplot(frequency, aes(x = proportion, y = `PT`, color = abs(`PT` - proportion))) + geom_abline(color = &quot;gray40&quot;, lty = 2) + geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) + geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) + scale_x_log10(labels = scales::percent_format()) + scale_y_log10(labels = scales::percent_format()) + scale_color_gradient(limits = c(0, 0.001), low = &quot;darkslategray4&quot;, high = &quot;gray7&quot;) + facet_wrap(~author, ncol = 2) + theme(legend.position=&quot;none&quot;) + labs(y = &quot;PT&quot;, x = NULL) Podemos quantificar quão diferente é o vocabulário através de um simples teste de correlação. cor.test(data = frequency[frequency$author == &quot;PSDB&quot;,], ~ proportion + `PT`) 6.3 Corpus O pacote tidyverse não possui uma função que gera um corpus, assim iremos utilizar o pacote quanteda que permite trabalhar com Tokens, Corpus e DFMs. Um ponto positivo em relação ao tidyverse é a possibilidade de gerar corpus e demais análises estas estando relacionadas ao documento que a originou. O uso do quanteda, segue o seguinte fluxograma: É possível criar um corpus a partir de diferentes fontes de dados: Um vetor de caracteres que consista em um documento por elemento; Uma matriz de dados que consista em um vetor de caracteres para os documentos e vetores adicionais para variáveis no nível do documento; Um objeto de classe VCorpus ou SimpleCorpus criado pelo pacote tm; Um objeto de palavras-chave no contexto construído por kwic(); Utilizando a base de dados com as falas proferidas no dia da aprovação do impeachment da Presidenta Dilma Rousseff pela Câmara dos Deputados, nesta seção focaremos em como construir um corpus a partir de uma matriz de dados. A base de dados é a mesma utiliada no item anterior, podendo ser carregada através do pacote txt4cs # carregando pacotes ---- library(quanteda) library(readtext) library(stringr) library(txt4cs) impeachment_dilma &lt;- txt4cs::impeachment_dilma Inicialmente devemos transformar o data.frame em um corpus, utilizando a função corpus()do pacote quanteda corp &lt;- corpus(impeachment_dilma) summary(corp, 5) 6.3.1 Filtrando corpus: corpus_subset() A função corpus_subset() permite selecionar documentos em um corpus com base em variáveis no nível do documento. No caso iremos selecionar o corpus referente ao PSDB e PT. corp_ptpsdb &lt;- corpus_subset(corp, partido %in% c(&#39;PT&#39;, &#39;PSDB&#39;)) summary(corp_ptpsdb, 5) 6.3.2 Trocando a unidade de texto no corpus: corpus_reshape() A função corpus_reshape() permite alterar a unidade de textos entre documentos, parágrafos e frases. Os textos podem ser restaurados para a unidade original mesmo que o corpus seja modificado por outras funções. Dessa forma, nos exemplos abaixo podemos mudar o corpus para formato de sentenças. A sentença segundo a função termina no ponto final e dá início a outra sentença. corp_sent &lt;- corpus_reshape(corp, to = &#39;sentences&#39;) corp_sent[11:12] Ou alterá-lo para um formato de documento, restaurando-os ao formato original: # restaurando documentos originais ---- corp_documents &lt;- corpus_reshape(corp_sent, to = &#39;documents&#39;) corp_documents[2] 6.4 Tokens e Corpus 6.4.1 Obtendo Tokens a partir de um Corpus: tokens() A função tokens(), como já vimos, segmenta o texto em unidades de textos significativas.Esta função no pacote quanteda já permite a remoção de espaços em branco e demais separadores de texto automaticamente, para isso é necessário escrever o argumento, como exemplificado abaixo na removação automática de pontuação. Usaremos o corpus gerado do item anterior. toks &lt;- tokens(corp, remove_punct = TRUE) #tokenizando e removendo a pontuação head(toks[[1]], 50) 6.4.2 Palavras-chave e seu contexto: kwic() Através dessa função presente no pacote quanteda é possível identificar o contexto imediato de um termo ou conjunto de palavras-chaves. No exemplo abaixo estamos buscando o contexto de palavras relacionadas a “golpe”: kw &lt;- kwic(toks, pattern = &#39;golp*&#39;) knitr::kable(head(kw, 5)) Também é possível buscar mais de um termo por linha de código, assim como selecionar a quantidade de caracteres que apareçam com o termo procurado. kw &lt;- kwic(toks, pattern = c(&quot;pela&quot;, &quot;pelo&quot;), window = 7) knitr::kable(head(kw, 5)) Caso queira identificar o contexto de frases, você deve dentro de phrase escrever uma frase respeitando os espaços em branco. # caso de uma frase inteira ---- kw_frase &lt;- kwic(toks, pattern = phrase(&#39;não vai ter golp*&#39;)) knitr::kable(kw_frase) 6.4.3 Selecionando tokens Como já colocado, a função tokens no pacote quanteda apenas remove separadores de texto e outros caracteres não textuais automaticamente se expressados no código. Para retirada de stopwords pode se fazer uso das funções tokens_select e tokens_remove, que são equivalentes. Novamente utilizaremos o corpus previamente construído. #Construção de tokens sem pontuações toks &lt;- tokens(corp, remove_punct = T, remove_numbers = T) # Removendo as stopwords #opção 1 toks_nostop &lt;- tokens_select(toks, pattern = stopwords(&#39;pt&#39;), selection = &#39;remove&#39;) #opção 2 toks_nostop &lt;- tokens_remove(toks_nostop, pattern = c(&#39;SR&#39;, &#39;PRESIDENTE&#39;, &#39;Esclarecimentos&#39;)) head(toks_nostop[[1]], 50) Com a função tokens_select também é possível selecionar palavras-chaves para análise e construindo um novo objeto. Por exemplo, para analisar palavras que aparecem junto de termos determinados, e sua posição original no texto, se pode utilizar respectivamente window e padding ao escrever o código: toks_voto &lt;- tokens_select(toks, pattern = c(&quot;votaç*&quot;, &quot;voto&quot;), padding = TRUE, window = 5) head(toks_voto, 1) 6.5 Stemming Até aqui, mesmo que os procedimentos adotados tenham diminuído a dimensionalidade do acervo de documentos ao transformá-lo em uma sacola de palavras (bag of words), ainda é necessária a adoção de procedimentos que possam reduzir a complexidade do conteúdo a ser analisado. Com esse objetivo, como apontado por Izumi e Moreira (2018) podemos pensar que determinado documento tenha em sua composição as seguintes palavras únicas: trabalho, trabalhador, trabalhista. Apesar de seus diferentes signficados, cada uma dessas palavras pode ser reduzida ao seu radical, trabalh, dando ao pequisador informações suficientes para sua análise e, assim reduzindo, o n de três palavras únicas para uma palavra que tem a soma das frequências anteriores. Para garantir que palavras que variam apenas na flexão, número ou conjugação sejam consideradas iguais, reduzindo o número de dimensões contido no acervo, por meio da adaptação do algoritmo de Porter (1980) para o português já desenvolvida por diferentes projetos (Snowball e NILC-USP),podem ser obtidos os stems das palavras restantes11. Chamamos esse procedimento de Stemming, o pacote quanteda possui a opção de stemming em português que usa o projeto Snowball através da função tokens_wordstem(), abaixo vamos utilizar o token já produzido no item acima. token_stem &lt;- tokens_wordstem(toks,language = &quot;pt&quot;) head(token_stem, 1) 6.5.1 Gerando n-grams O método de tokenização apresentado nos itens acima se chama bag-of-words, ou BOW, e como observado nas análises realizadas, não respeita a ordem em que as palavras foram escritas. Para algumas análises essa ordem é necessária e para realizá-la pode-se utilizar o método N-grams, gerando assim tokens de qualquer tamanho e respeitando a ordem em que aparecem no texto. Através da função tokens_ngrams() é possível utilizar esse método. Com tokens_ngram() você pode definir o tamanho que deseja que seus tokens sejam criados, tanto especificando um n-gram único, ou estabelecendo um limite de tamanho de n-grams que o próprio R irá identificar no texto. toks &lt;- tokens(corp, remove_punct = T, remove_numbers = T) #criando n-grams toks_ngram &lt;- tokens_ngrams(toks, n = 2:4) head(toks_ngram[[1]], 20) O tokens_compound realiza processo similiar, mas com a diferença de gerar n-grams de forma seletiva, especificando o termo de análise desejada. Após a seleção, para análise do resultado, você deve filtrar pelo termo com tokens_select #Gerar n-grams específicas toks_neg_bigram &lt;- tokens_compound(toks, pattern = phrase(&#39;não *&#39;)) #Selecionar as n-grams geradas toks_neg_bigram_select &lt;- tokens_select(toks_neg_bigram, pattern = phrase(&#39;não_*&#39;)) #Resultado head(toks_neg_bigram_select[[6]], 50) 6.6 DFM: Matriz de documentos e termos Vamos transformar nossos tokens em uma DFM (Document Feature Matrix), também chamada de DTM (Document Term Matrix). Relembrando que uma DFM é uma vetorização do texto, em que cada linha representa um documento e cada coluna um termo. Para isso iremos usar a função dfm(). #Construindo um corpus e removendo stopwords toks &lt;- tokens(corp, remove_punct = TRUE, remove_numbers = T) toks &lt;- tokens_select(toks, pattern = stopwords(&#39;pt&#39;), selection = &#39;remove&#39;) toks &lt;- tokens_remove(toks, pattern = c(&#39;sr&#39;, &#39;presidente&#39;, &#39;esclarecimentos&#39;, &#39;quero&#39;, &#39;ser&#39;, &#39;srs&#39;, &#39;é&#39;, &#39;aqui&#39;)) #Construindo um DFM dfmat &lt;- dfm(toks) Você pode obter a quantidade de documentos e termos utilizando ndoc e nfeat Abaixo vemos que temos 555 documentos ndoc(dfmat) # numero de documentos Observamos que temos 6395 termos, ou features. nfeat(dfmat) # numero de features Também é possível obter o nome dos documentos e das features com docnames e featnames e quais as features mais frequentes com topfeatures Abaixo estamos combinando a função head com docnames para obtermos somente o nome dos 20 primeiros documentos. head(docnames(dfmat), 20) # ids dos documentos Abaixo estamos combinando a função head com featnames para obtermos somente o nome das 20 primeiras features. head(featnames(dfmat), 20) # algumas features Para verificar as 10 features mais frequentes podemos somente utilizar a função topfeatures e indicar quantas features queremos que retorne. topfeatures(dfmat, 10) # features mais frequentes 6.6.1 Refinando a seleção de features Você pode selecionar as features que tiveram uma frequência desejada para analisar através de dfm_trim. No caso abaixo, documentos com menos de 1% de frequência por features serão removidas, assim de 6320 features ficamos com 769 features. dfmat_docfreq &lt;- dfm_trim(dfmat, min_docfreq = 0.01, docfreq_type = &quot;prop&quot;) nfeat(dfmat_docfreq) 6.6.2 Realizando Steam numa DFM Caso não tenha realizado o stem através dos tokens e já possui uma dfm, é possível realizá-la também nesta etapa, através da função dfm_wordstem dfmat_stem &lt;- dfm_wordstem(dfmat) 6.6.3 Agrupando documentos numa DFM Para agrupar os documentos em uma DFM, você pode utilizar a função dfm_group, que irá uni-los baseado em um argumento. No entanto, para simplificar o seu código, você pode agrupar baseado em um argumento no momento de gerar um dfm. No exemplo abaixo estamos agrupando a dfm por nome do orador, retornando 512 documentos. # Por autor dfmat_autor &lt;- dfm(dfmat_docfreq, groups = &quot;nomeOrador&quot;) ndoc(dfmat_autor) No exemplo abaixo estamos agrupando a dfm por nome do partido, retornando 26 documentos. # Por partido ---- dfmat_party &lt;- dfm(dfmat_docfreq, groups = &quot;partido&quot;) ndoc(dfmat_party) 6.7 FCM: Matriz de co-ocorrência de termos Retomando, uma FCM (Feature Co-occurrence Matrix) é uma matriz de co-ocorrência de termos, ou seja, essa função mensura a co-ocorrencia de features dentro de um contexto definido previamente, retornando linhas e colunas com os termos e os valores a contagem de co-ocorrencia entre esses termos. O contexto pode ser um documento ou um conjunto de documentos. Pode-se construir uma FCM a partir de uma DFM ou um objeto de tokens usando a função fcm(), assim demonstrando o número de co-ocorrências de um feature, seu comportamento é similiar a uma DFM. fcmat &lt;- fcm(dfmat) head(fcmat, 5) Por meio de um FCM é possível retornar as palavras que ocorrem mais frequentemente com topfeatures(), assim como visualizar uma rede semântica com a função textplot_network(), por exemplo. feat &lt;- names(topfeatures(fcmat, 50)) fcmat_select &lt;- fcm_select(fcmat, pattern = feat, selection = &quot;keep&quot;) head(fcmat_select, 5) Estabelecemos o tamanho da rede selecionando o DFM segundo as topfeatures criadas no objeto acima. Para plotar o gráfico das principais features utilizamos textplot_network, estabelecendo uma frequência mínima. size &lt;- log(colSums(dfm_select(dfmat, feat, selection = &quot;keep&quot;))) set.seed(144) textplot_network(fcmat_select, min_freq = 0.95, vertex_size = size / max(size) * 3) Toda essa seção está baseada no livro Text Mining with R↩ O processo de stemming é uma aproximação do processo de lematização, que reduz palavras às suas formas básicas.↩ "],
["stat.html", "Capítulo 7 Mineração e estatísticas básicas 7.1 Análise de frequência 7.2 Nuvem de palavras 7.3 tf-idf 7.4 Rede de n-grams 7.5 Correlação pareada 7.6 Diversidade lexical 7.7 Similaridade entre documentos/termos 7.8 KEYNESS: Análise de Frequência Relativa", " Capítulo 7 Mineração e estatísticas básicas EM CONSTRUÇÃO… 7.1 Análise de frequência 7.2 Nuvem de palavras 7.3 tf-idf 7.4 Rede de n-grams 7.5 Correlação pareada 7.6 Diversidade lexical 7.7 Similaridade entre documentos/termos 7.8 KEYNESS: Análise de Frequência Relativa "],
["scalling.html", "Capítulo 8 Escalonamento 8.1 Wordscore 8.2 Wordfish", " Capítulo 8 Escalonamento EM CONSTRUÇÃO… 8.1 Wordscore 8.2 Wordfish "],
["classificacao.html", "Capítulo 9 Classificação 9.1 Método de dicionário: Análise de sentimento 9.2 Naive Bayes 9.3 LDA: Latent Dirichlet Allocation 9.4 STM: Structed Topic Model", " Capítulo 9 Classificação EM CONSTRUÇÃO… 9.1 Método de dicionário: Análise de sentimento 9.2 Naive Bayes 9.3 LDA: Latent Dirichlet Allocation 9.4 STM: Structed Topic Model "],
["referências.html", "Referências", " Referências "]
]
